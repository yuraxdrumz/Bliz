{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./examples/http-example/index.js","webpack:///./examples/http-example/schemas.js","webpack:///./examples/http-example/slash.router.js","webpack:///./examples/http-example/status.handler.js","webpack:///./examples/http-example/test.handler.js","webpack:///./src/apolloServer/graphqlOptions.js","webpack:///./src/apolloServer/index.js","webpack:///./src/apolloServer/main.js","webpack:///./src/apolloServer/runHttpQuery.js","webpack:///./src/apolloServer/runQuery.js","webpack:///./src/graphql/graphQlHandler.js","webpack:///./src/graphql/graphQlSchema.js","webpack:///./src/http/defaultHandler.js","webpack:///./src/http/handler.js","webpack:///./src/http/openApi.js","webpack:///./src/http/path.js","webpack:///./src/http/request.js","webpack:///./src/http/response.js","webpack:///./src/http/router.js","webpack:///./src/main.js","webpack:///./src/middlewareHandler.js","webpack:///./src/objectFactories.js","webpack:///./src/registerRouters.js","webpack:///./src/sockets/socketHandler.js","webpack:///./src/sockets/socketListener.js","webpack:///./src/sockets/socketRouter.js","webpack:///./src/utils.js","webpack:///external \"apollo-cache-control\"","webpack:///external \"apollo-client-preset\"","webpack:///external \"apollo-link-http\"","webpack:///external \"apollo-server-module-graphiql\"","webpack:///external \"apollo-tracing\"","webpack:///external \"apollo-utilities\"","webpack:///external \"babel-polyfill\"","webpack:///external \"bluebird\"","webpack:///external \"body-parser\"","webpack:///external \"etag\"","webpack:///external \"eventemitter2\"","webpack:///external \"fs\"","webpack:///external \"graphql\"","webpack:///external \"graphql-extensions\"","webpack:///external \"graphql-subscriptions\"","webpack:///external \"graphql-tools\"","webpack:///external \"http\"","webpack:///external \"json-to-pretty-yaml\"","webpack:///external \"node-fetch\"","webpack:///external \"os\"","webpack:///external \"path\"","webpack:///external \"print-message\"","webpack:///external \"socket.io\"","webpack:///external \"subscriptions-transport-ws\"","webpack:///external \"superstruct\"","webpack:///external \"treeify\"","webpack:///external \"url\"","webpack:///external \"ws\""],"names":["app","registerRouters","prettyPrint","middleware","bodyParser","json","listen","bodySchema","name","last_name","address","paramSchema","param","body","statusSchema","status","otherSchema","lala","responseSchema","data","querySchema","ggg","errorSchema","error","slashRouter","createRouter","post","req","res","next","console","log","statusHandler","createPath","handler","params","query","describe","tags","summary","description","incoming","in","schema","outgoing","testHandler","files","options","args","Error","message","resolveGraphqlOptions","runQuery","LogFunction","LogMessage","LogStep","LogAction","runHttpQuery","HttpQueryError","graphqlExpress","graphiqlExpress","url","GraphiQL","arguments","length","graphqlHandler","method","then","gqlResponse","setHeader","Buffer","byteLength","toString","write","end","headers","Object","keys","forEach","header","statusCode","Handler","parse","resolveGraphiQLString","graphiqlString","handlerArguments","request","isGetRequest","optionsObject","formatErrorFn","formatError","requestPayload","Allow","isBatch","Array","isArray","requests","map","requestParams","extensions","JSON","undefined","persistedQuery","stringify","errors","isQueryOperation","operationName","variables","context","assign","create","getPrototypeOf","rootValue","logFunction","validationRules","formatResponse","fieldResolver","debug","tracing","cacheControl","formatParams","e","Promise","reject","resolve","all","responses","isGraphQLError","operationAST","operation","GraphQLResponse","validation","execute","start","action","step","key","QueryOptions","Function","doRunQuery","printStackTrace","stack","format","formatter","err","newError","documentAST","debugDefault","push","TracingExtension","CacheControlExtension","extensionStack","GraphQLExtensionStack","_extensionStack","requestDidStart","qry","syntaxError","rules","specifiedRules","concat","validationErrors","executionDidStart","result","response","executionDidEnd","requestDidEnd","executionError","server","_useGraphql","_internal","PubSub","makeExecutableSchema","getIntrospectSchema","createHttpLink","HttpLink","fetch","introspectSchema","makeRemoteExecutableSchema","mergeSchemas","SubscriptionServer","SubscriptionClient","ws","getMainDefinition","split","os","print","subscribe","_injected","_Instance","_version","executableSchema","directives","_graphQlDirectives","directiveResolvers","enums","_graphQlEnums","schemas","_graphQlSchemas","pubsub","finalGraphQlOptionsObject","logger","_graphQlRemoteEndpoints","_graphQlExecutableSchema","Directives","Query","Mutation","Subscription","Types","Enums","resolvers","Enum","option","join","dir","includes","schemaProps","getObjProps","mutation","subscription","type","resolver","props","typeDefs","getIntrospectSchemaWithParams","allowPartialRemoteSchema","ep","filter","item","router","useGraphiql","graphiqlRoute","endpointURL","graphqlRoute","subscriptionsEndpoint","get","events","emit","apply","path","platform","hostname","arch","cpus","freemem","totalmem","toFixed","graphQlHandler","GraphQlSchemaCreator","_graphql","_pathData","mockSchema","obj","chainLink","override","defaultErrorHandler","StructError","dataPassed","valueReceived","value","typeExpected","toUpperCase","createHandler","__proto__","urlUtil","splitRest","urlCombinationOptions","populateUrlOptions","handleNestedRoutersUtil","_routersObject","baseOfRequest","rest","combinedRoutersMids","finalRest","populateQueryUtil","populateParamsUtil","canSkipBecauseParams","_middleWares","midHandler","defaultHandler","currentRoute","middleWareArr","i","searchIn","statusObject","errHandler","routerErrorHandler","errorFromErrorHandlers","reduce","prev","curr","contactStruct","email","licenseStruct","serverStruct","infoStruct","title","version","termsOfService","contact","license","mainDescribeStruct","openapi","security","info","servers","mainDescribe","validJson","singlePathMetaData","parameters","requestBody","methodStruct","methodName","pathStruct","pathName","getNested","struct","kind","replace","substring","indexOf","types","addRequest","content","contentType","$ref","responseBuilder","responseObject","resp","pathDescribe","myRegexp","swaggerPath","bodyRequests","parametersRequests","injectedPathWithParams","parametersToInject","arrayToConcat","required","jsonWithParams","securitySchemes","schemasObject","sc","components","PathCreator","_PathReturn","parent","arr","http","IncomingMessage","prototype","ServerResponse","stringified","generatedEtag","RouterCreator","base","_RouterReturn","_routerData","put","del","subRouters","utils","factories","httpDependencies","CreateHandler","graphqlDependencies","GraphQlCreator","socketDependencies","SocketListenerCreator","SocketRouterCreator","socketMiddlewareHandler","socketHandler","superStructObject","superstruct","appDependencies","io","fs","treeify","EventEmitter","packgeJson","RegisterRouters","BlizAppParams","BlizApp","_options","_loggerEntity","sockets","_useSockets","useSockets","delimiter","_socketRoutersObject","_socketMiddlewares","_socketSubApps","useGraphql","defaultMaxAge","_useHttp","useSwagger","_describe","_subApps","_appData","_createHandler","bind","CreateNewObjOf","dependencies","AssignHandler","CreateObjectArray","CreateArray","CreateSwagger","PrettyPrint","EventsCreator","GetObjProps","Listen","BlizCreator","fn","timeout","throwError","handlerPromise","promiseTimeout","socket","msg","cb","promise","ms","id","setTimeout","clearTimeout","race","createServer","Cluster","populateObjectWithTreeUtil","once","setImmediate","asTree","Method","object","swagger","swaggerOptions","yaml","routersKeys","mainPathsObject","paths","fullPath","responseObjectsForSchema","fullObj","absoluteFilePath","writeFileSync","wildcard","populateSubAppsUtil","populateRoutersUtil","populateSocketRoutersUtil","routers","registerSocketRouters","registerGraphQlSchemas","registerRemoteGraphQlSchemas","endpoints","checkSubRouters","injectedIo","on","eventKeys","event","eventKey","chosenEvent","combinedMiddlewareArray","prefix","CreateSocketListener","pathData","routerData","methodUpperCase","dividedUrl","toLowerCase","slice","each","unshift","checkBaseUtil","remoteSchema","httpLink","uri","wsLink","reconnect","link","entity","objectToAddTo","keysOfEntity","routeValues","routeKey","route","assignedOption","innerRouterObj","list","mds","routes","subApps","subApp","_middlewares","innerSubApps","startStr","urlPart","splitUrl","routesObject","lastDefinedRoute","indexOfLastRoute","substr","urlArray","keyValue","urlToReturn","newBase","array","routersObject","splitArr","counter","toBeCounted","len","keyPath","lastKeyIndex"],"mappings":"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ACDmH,MAAIkQ,QAAQC,YAAR,CAAJ,IAA6B5P,KAA7B;AACD,CARD;;QAWEK,O,GAAAA,O;QACAsL,mB,GAAAA,mB;QACAnL,kB,GAAAA,kB;QACAC,uB,GAAAA,uB;QACAiL,mB,GAAAA,mB;QACA0B,a,GAAAA,a;QACA5C,0B,GAAAA,0B;QACAzJ,iB,GAAAA,iB;QACAC,kB,GAAAA,kB;QACA4K,yB,GAAAA,yB;QACAM,e,GAAAA,e;QACAxR,mB,GAAAA,mB;QACA/D,M,GAAAA,M;;;;;;;;;;;ACtRF,iD;;;;;;;;;;;ACAA,iD;;;;;;;;;;;ACAA,6C;;;;;;;;;;;ACAA,0D;;;;;;;;;;;ACAA,2C;;;;;;;;;;;ACAA,6C;;;;;;;;;;;ACAA,2C;;;;;;;;;;;ACAA,qC;;;;;;;;;;;ACAA,wC;;;;;;;;;;;ACAA,iC;;;;;;;;;;;ACAA,0C;;;;;;;;;;;ACAA,+B;;;;;;;;;;;ACAA,oC;;;;;;;;;;;ACAA,+C;;;;;;;;;;;ACAA,kD;;;;;;;;;;;ACAA,0C;;;;;;;;;;;ACAA,iC;;;;;;;;;;;ACAA,gD;;;;;;;;;;;ACAA,uC;;;;;;;;;;;ACAA,+B;;;;;;;;;;;ACAA,iC;;;;;;;;;;;ACAA,0C;;;;;;;;;;;ACAA,sC;;;;;;;;;;;ACAA,uD;;;;;;;;;;;ACAA,wC;;;;;;;;;;;ACAA,oC;;;;;;;;;;;ACAA,gC;;;;;;;;;;;ACAA,+B","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./examples/http-example/index.js\");\n","import Bliz from '../../src/main'\r\nimport bodyParser from 'body-parser'\r\nimport path from 'path'\r\nimport slashRouter from './slash.router'\r\n\r\nconst app = Bliz()\r\n\r\napp\r\n  .registerRouters(slashRouter(app))\r\n  .prettyPrint()\r\n  // .describe({\r\n  //   title:'my api', \r\n  //   version:'1.0.1', \r\n  //   description:'some random api', \r\n  //   contact:{name:'me', email:'yuri.khomyakov@ironsrc.com', url:'asddsasad'},\r\n  //   license:{\r\n  //     name: 'MIT',\r\n  //     url:'dsadsa'\r\n  //   },\r\n  //   servers:[{url:'sadadsadads', description:'asdadsdssdaasd'}]\r\n  // })\r\n  // .swagger({useSwagger: true,absoluteFilePath: path.resolve('./swagger.yaml')})\r\n  .middleware(bodyParser.json())\r\n  .listen(4000)\r\n","import { struct } from '../../src/main'\r\n\r\nconst bodySchema = struct({\r\n  name: 'string',\r\n  last_name: 'string',\r\n  address: 'string?'\r\n})\r\n\r\nexport const paramSchema = struct({\r\n  param: 'string?',\r\n  body: bodySchema\r\n})\r\nexport const statusSchema = struct({\r\n  status: 'string'\r\n})\r\n\r\nexport const otherSchema = struct({\r\n  lala:'number'\r\n})\r\n\r\nexport const responseSchema = struct({\r\n  data: otherSchema\r\n})\r\n\r\nexport const querySchema = struct({\r\n  ggg: 'string'\r\n})\r\n\r\nexport const errorSchema = struct({\r\n  error: 'string'\r\n})\r\n","import statusHandler from './status.handler'\r\nimport testHandler from './test.handler'\r\n\r\nexport default function slashRouter (app) {\r\n  return app\r\n  .createRouter('/api/')\r\n  .post(statusHandler(app))\r\n  .post(testHandler(app))\r\n  .middleware((req, res, next) => {\r\n    console.log('hit /api')\r\n    next()\r\n  })\r\n}\r\n","import { paramSchema, statusSchema, responseSchema, errorSchema } from './schemas'\r\n\r\nexport default function statusHandler (app) {\r\n  return app\r\n  .createPath('/:status/')\r\n  .handler((req, res) => res.json({params: req.params, query: req.query}))\r\n  .describe({\r\n    tags: ['oven', 'jenkins'],\r\n    summary: 'simple summary for swagger',\r\n    description: 'returns whatever it receives',\r\n    incoming: [{in: 'body', schema: paramSchema}, {in:'path', schema: statusSchema}],\r\n    outgoing: [{status: 200, schema: responseSchema}, {status: 400, schema: errorSchema}]\r\n  })\r\n}","import { paramSchema, querySchema, responseSchema, errorSchema } from './schemas'\r\n\r\nexport default function testHandler (app) {\r\n  return app\r\n  .createPath('/test/:param')\r\n  .handler((req, res) => res.json({params: req.params, query: req.query, files: req.files}))\r\n  .describe({\r\n    tags: ['main route', 'simple tag'],\r\n    summary: 'simple summary for swagger',\r\n    description: 'returns whatever it receives',\r\n    incoming: [{in: 'path', schema: paramSchema}, {in: 'query', schema: querySchema}],\r\n    outgoing: [{status: 200, schema: responseSchema}, {status: 400, schema: errorSchema}]\r\n  })\r\n  .middleware((req, res, next) => {\r\n    console.log('works like a charm!')\r\n    next()\r\n  })\r\n}\r\n","export async function resolveGraphqlOptions(options, ...args) {\r\n  if (typeof options === 'function') {\r\n    try {\r\n      return await options(...args)\r\n    } catch (e) {\r\n      throw new Error(`Invalid options provided to ApolloServer: ${e.message}`)\r\n    }\r\n  } else {\r\n    return options\r\n  }\r\n}\r\n","export { runQuery, LogFunction, LogMessage, LogStep, LogAction } from './runQuery'\r\nexport { runHttpQuery, HttpQueryError } from './runHttpQuery'\r\nexport { resolveGraphqlOptions } from './graphqlOptions'\r\n","import * as url from 'url'\r\nimport { GraphQLOptions, HttpQueryError, runHttpQuery } from './index'\r\nimport * as GraphiQL from 'apollo-server-module-graphiql'\r\n\r\nexport function graphqlExpress(options) {\r\n  if (!options) {\r\n    throw new Error('Apollo Server requires options.')\r\n  }\r\n\r\n  if (arguments.length > 1) {\r\n    // TODO: test this\r\n    throw new Error(`Apollo Server expects exactly one argument, got ${arguments.length}`)\r\n  }\r\n\r\n  const graphqlHandler = (req, res) => {\r\n    runHttpQuery([req, res], {\r\n      method: req.method,\r\n      options: options,\r\n      query: req.method === 'POST' ? req.body : req.query\r\n    }).then(\r\n      (gqlResponse) => {\r\n        res.setHeader('Content-Type', 'application/json')\r\n        res.setHeader('Content-Length', Buffer.byteLength(gqlResponse, 'utf8').toString())\r\n        res.write(gqlResponse)\r\n        res.end()\r\n      },\r\n      (error) => {\r\n        // if ('HttpQueryError' !== error.name) {\r\n        //   throw error\r\n        // }\r\n\r\n        if (error.headers) {\r\n          Object.keys(error.headers).forEach((header) => {\r\n            res.setHeader(header, error.headers[header])\r\n          })\r\n        }\r\n\r\n        res.statusCode = error.statusCode || 500\r\n        res.write(error.message)\r\n        res.end()\r\n      }\r\n    )\r\n  }\r\n\r\n  return graphqlHandler\r\n}\r\n\r\nexport function graphiqlExpress(options) {\r\n  const Handler = (req, res) => {\r\n    const query = req.url && url.parse(req.url, true).query\r\n    GraphiQL.resolveGraphiQLString(query, options, req).then(\r\n      (graphiqlString) => {\r\n        res.setHeader('Content-Type', 'text/html')\r\n        res.write(graphiqlString)\r\n        res.end()\r\n      },\r\n      (error) => {\r\n        throw error\r\n      }\r\n    )\r\n  }\r\n\r\n  return Handler\r\n}\r\n","import { parse, getOperationAST, DocumentNode, formatError, ExecutionResult } from 'graphql'\r\nimport { runQuery } from './runQuery'\r\nimport { default as GraphQLOptions, resolveGraphqlOptions } from './graphqlOptions'\r\n\r\nexport class HttpQueryError extends Error {\r\n  constructor(statusCode, message, isGraphQLError = false, headers) {\r\n    super(message)\r\n    this.name = 'HttpQueryError'\r\n    this.statusCode = statusCode\r\n    this.isGraphQLError = isGraphQLError\r\n    this.headers = headers\r\n  }\r\n}\r\n\r\nfunction isQueryOperation(query, operationName) {\r\n  const operationAST = getOperationAST(query, operationName)\r\n  return operationAST.operation === 'query'\r\n}\r\n\r\nexport async function runHttpQuery(handlerArguments, request) {\r\n  let isGetRequest = false\r\n  let optionsObject\r\n\r\n  try {\r\n    optionsObject = await resolveGraphqlOptions(request.options, ...handlerArguments)\r\n  } catch (e) {\r\n    throw new HttpQueryError(500, e.message)\r\n  }\r\n  const formatErrorFn = optionsObject.formatError || formatError\r\n  let requestPayload\r\n  switch (request.method) {\r\n    case 'POST':\r\n      if (!request.query || Object.keys(request.query).length === 0) {\r\n        throw new HttpQueryError(\r\n          500,\r\n          'POST body missing. Did you forget use body-parser middleware?'\r\n        )\r\n      }\r\n      requestPayload = request.query\r\n      break\r\n    case 'GET':\r\n      if (!request.query || Object.keys(request.query).length === 0) {\r\n        throw new HttpQueryError(400, 'GET query missing.')\r\n      }\r\n\r\n      isGetRequest = true\r\n      requestPayload = request.query\r\n      break\r\n\r\n    default:\r\n      throw new HttpQueryError(405, 'Apollo Server supports only GET/POST requests.', false, {\r\n        Allow: 'GET, POST'\r\n      })\r\n  }\r\n\r\n  let isBatch = true\r\n  // TODO: do something different here if the body is an array.\r\n  // Throw an error if body isn't either array or object.\r\n  if (!Array.isArray(requestPayload)) {\r\n    isBatch = false\r\n    requestPayload = [requestPayload]\r\n  }\r\n  const requests = requestPayload.map((requestParams) => {\r\n    try {\r\n      let query = requestParams.query\r\n      let extensions = requestParams.extensions\r\n      if (isGetRequest && extensions) {\r\n        // For GET requests, we have to JSON-parse extensions. (For POST\r\n        // requests they get parsed as part of parsing the larger body they're\r\n        // inside.)\r\n        try {\r\n          extensions = JSON.parse(extensions)\r\n        } catch (error) {\r\n          throw new HttpQueryError(400, 'Extensions are invalid JSON.')\r\n        }\r\n      }\r\n\r\n      if (query === undefined && extensions && extensions.persistedQuery) {\r\n        // It looks like we've received an Apollo Persisted Query. Apollo Server\r\n        // does not support persisted queries out of the box, so we should fail\r\n        // fast with a clear error saying that we don't support APQs. (A future\r\n        // version of Apollo Server may support APQs directly.)\r\n        throw new HttpQueryError(\r\n          // Return 200 to simplify processing: we want this to be intepreted by\r\n          // the client as data worth interpreting, not an error.\r\n          200,\r\n          JSON.stringify({\r\n            errors: [\r\n              {\r\n                message: 'PersistedQueryNotSupported'\r\n              }\r\n            ]\r\n          }),\r\n          true,\r\n          {\r\n            'Content-Type': 'application/json'\r\n          }\r\n        )\r\n      }\r\n\r\n      if (isGetRequest) {\r\n        if (typeof query === 'string') {\r\n          // preparse the query incase of GET so we can assert the operation.\r\n          // XXX This makes the type of 'query' in this function confused\r\n          //     which has led to us accidentally supporting GraphQL AST over\r\n          //     the wire as a valid query, which confuses users. Refactor to\r\n          //     not do this. Also, for a GET request, query really shouldn't\r\n          //     ever be anything other than a string or undefined, so this\r\n          //     set of conditionals doesn't quite make sense.\r\n          query = parse(query)\r\n        } else if (!query) {\r\n          // Note that we've already thrown a different error if it looks like APQ.\r\n          throw new HttpQueryError(400, 'Must provide query string.')\r\n        }\r\n\r\n        if (!isQueryOperation(query, requestParams.operationName)) {\r\n          throw new HttpQueryError(405, `GET supports only query operation`, false, {\r\n            Allow: 'POST'\r\n          })\r\n        }\r\n      }\r\n\r\n      const operationName = requestParams.operationName\r\n\r\n      let variables = requestParams.variables\r\n      if (typeof variables === 'string') {\r\n        try {\r\n          // XXX Really we should only do this for GET requests, but for\r\n          // compatibility reasons we'll keep doing this at least for now for\r\n          // broken clients that ship variables in a string for no good reason.\r\n          variables = JSON.parse(variables)\r\n        } catch (error) {\r\n          throw new HttpQueryError(400, 'Variables are invalid JSON.')\r\n        }\r\n      }\r\n\r\n      let context = optionsObject.context || {}\r\n      if (typeof context === 'function') {\r\n        context = context()\r\n      } else if (isBatch) {\r\n        context = Object.assign(Object.create(Object.getPrototypeOf(context)), context)\r\n      }\r\n      let params = {\r\n        schema: optionsObject.schema,\r\n        query: query,\r\n        variables: variables,\r\n        context,\r\n        rootValue: optionsObject.rootValue,\r\n        operationName: operationName,\r\n        logFunction: optionsObject.logFunction,\r\n        validationRules: optionsObject.validationRules,\r\n        formatError: formatErrorFn,\r\n        formatResponse: optionsObject.formatResponse,\r\n        fieldResolver: optionsObject.fieldResolver,\r\n        debug: optionsObject.debug,\r\n        tracing: optionsObject.tracing,\r\n        cacheControl: optionsObject.cacheControl\r\n      }\r\n\r\n      if (optionsObject.formatParams) {\r\n        params = optionsObject.formatParams(params)\r\n      }\r\n      return runQuery(params)\r\n    } catch (e) {\r\n      // Populate any HttpQueryError to our handler which should\r\n      // convert it to Http Error.\r\n      if (e.name === 'HttpQueryError') {\r\n        return Promise.reject(e)\r\n      }\r\n\r\n      return Promise.resolve({ errors: [formatErrorFn(e)] })\r\n    }\r\n  })\r\n  const responses = await Promise.all(requests)\r\n\r\n  if (!isBatch) {\r\n    const gqlResponse = responses[0]\r\n    if (gqlResponse.errors && typeof gqlResponse.data === 'undefined') {\r\n      throw new HttpQueryError(400, JSON.stringify(gqlResponse), true, {\r\n        'Content-Type': 'application/json'\r\n      })\r\n    }\r\n    return JSON.stringify(gqlResponse)\r\n  }\r\n\r\n  return JSON.stringify(responses)\r\n}\r\n","import {\r\n  GraphQLSchema,\r\n  GraphQLFieldResolver,\r\n  ExecutionResult,\r\n  DocumentNode,\r\n  parse,\r\n  print,\r\n  validate,\r\n  execute,\r\n  GraphQLError,\r\n  formatError,\r\n  specifiedRules,\r\n  ValidationContext\r\n} from 'graphql'\r\n\r\nimport {\r\n  enableGraphQLExtensions,\r\n  GraphQLExtension,\r\n  GraphQLExtensionStack\r\n} from 'graphql-extensions'\r\nimport { TracingExtension } from 'apollo-tracing'\r\nimport { CacheControlExtension, CacheControlExtensionOptions } from 'apollo-cache-control'\r\n\r\nexport const GraphQLResponse = {\r\n  data: {},\r\n  errors: [],\r\n  extensions: {}\r\n}\r\n\r\nexport const LogAction = {\r\n  request: '',\r\n  parse: '',\r\n  validation: '',\r\n  execute: ''\r\n}\r\n\r\nexport const LogStep = {\r\n  start: '',\r\n  end: '',\r\n  status: ''\r\n}\r\n\r\nexport const LogMessage = {\r\n  action: LogAction,\r\n  step: LogStep,\r\n  key: '',\r\n  data: {}\r\n}\r\n\r\nexport function LogFunction(message) {}\r\n\r\nexport const QueryOptions = {\r\n  schema: {},\r\n  query: '',\r\n  rootValue: {},\r\n  context: {},\r\n  variables: {},\r\n  operationName: '',\r\n  logFunction: LogFunction,\r\n  validationRules: [],\r\n  fieldResolver: {},\r\n  formatError: Function,\r\n  formatResponse: Function,\r\n  debug: false,\r\n  tracing: false,\r\n  cacheControl: false\r\n}\r\n\r\nexport function runQuery(options) {\r\n  // Fiber-aware Promises run their .then callbacks in Fibers.\r\n  return Promise.resolve().then(() => doRunQuery(options))\r\n}\r\n\r\nfunction printStackTrace(error) {\r\n  console.error(error.stack)\r\n}\r\n\r\nfunction format(errors, formatter) {\r\n  return errors.map((error) => {\r\n    if (formatter !== undefined) {\r\n      try {\r\n        return formatter(error)\r\n      } catch (err) {\r\n        console.error('Error in formatError function:', err)\r\n        const newError = new Error('Internal server error')\r\n        return formatError(newError)\r\n      }\r\n    } else {\r\n      return formatError(error)\r\n    }\r\n  })\r\n}\r\n\r\nfunction doRunQuery(options) {\r\n  let documentAST\r\n  const logFunction =\r\n    options.logFunction ||\r\n    function(...args) {\r\n      return args\r\n    }\r\n  const debugDefault = process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test'\r\n  const debug = options.debug !== undefined ? options.debug : debugDefault\r\n\r\n  logFunction({ action: LogAction.request, step: LogStep.start })\r\n  const context = options.context || {}\r\n  let extensions = []\r\n  if (options.tracing) {\r\n    extensions.push(TracingExtension)\r\n  }\r\n  if (options.cacheControl === true) {\r\n    extensions.push(CacheControlExtension)\r\n  } else if (options.cacheControl) {\r\n    extensions.push(new CacheControlExtension(options.cacheControl))\r\n  }\r\n  const extensionStack = extensions.length > 0 && new GraphQLExtensionStack(extensions)\r\n\r\n  if (extensionStack) {\r\n    context._extensionStack = extensionStack\r\n    enableGraphQLExtensions(options.schema)\r\n\r\n    extensionStack.requestDidStart()\r\n  }\r\n  const qry = typeof options.query === 'string' ? options.query : print(options.query)\r\n  logFunction({\r\n    action: LogAction.request,\r\n    step: LogStep.status,\r\n    key: 'query',\r\n    data: qry\r\n  })\r\n  logFunction({\r\n    action: LogAction.request,\r\n    step: LogStep.status,\r\n    key: 'variables',\r\n    data: options.variables\r\n  })\r\n  logFunction({\r\n    action: LogAction.request,\r\n    step: LogStep.status,\r\n    key: 'operationName',\r\n    data: options.operationName\r\n  })\r\n\r\n  // if query is already an AST, don't parse or validate\r\n  // XXX: This refers the operations-store flow.\r\n  if (typeof options.query === 'string') {\r\n    try {\r\n      logFunction({ action: LogAction.parse, step: LogStep.start })\r\n      documentAST = parse(options.query)\r\n      logFunction({ action: LogAction.parse, step: LogStep.end })\r\n    } catch (syntaxError) {\r\n      logFunction({ action: LogAction.parse, step: LogStep.end })\r\n      return Promise.resolve({\r\n        errors: format([syntaxError], options.formatError)\r\n      })\r\n    }\r\n  } else {\r\n    documentAST = options.query\r\n    let rules = specifiedRules\r\n    if (options.validationRules) {\r\n      rules = rules.concat(options.validationRules)\r\n    }\r\n    logFunction({ action: LogAction.validation, step: LogStep.start })\r\n    const validationErrors = validate(options.schema, documentAST, rules)\r\n    logFunction({ action: LogAction.validation, step: LogStep.end })\r\n    if (validationErrors.length) {\r\n      return Promise.resolve({\r\n        errors: format(validationErrors, options.formatError)\r\n      })\r\n    }\r\n\r\n    if (extensionStack) {\r\n      extensionStack.executionDidStart()\r\n    }\r\n  }\r\n  try {\r\n    logFunction({ action: LogAction.execute, step: LogStep.start })\r\n    return Promise.resolve(\r\n      execute(\r\n        options.schema,\r\n        documentAST,\r\n        options.rootValue,\r\n        context,\r\n        options.variables,\r\n        options.operationName,\r\n        options.fieldResolver\r\n      )\r\n    ).then((result) => {\r\n      logFunction({ action: LogAction.execute, step: LogStep.end })\r\n      logFunction({ action: LogAction.request, step: LogStep.end })\r\n\r\n      let response = {\r\n        data: result.data\r\n      }\r\n\r\n      if (result.errors) {\r\n        response.errors = format(result.errors, options.formatError)\r\n        if (debug) {\r\n          result.errors.map(printStackTrace)\r\n        }\r\n      }\r\n\r\n      if (extensionStack) {\r\n        extensionStack.executionDidEnd()\r\n        extensionStack.requestDidEnd()\r\n        response.extensions = extensionStack.format()\r\n      }\r\n\r\n      if (options.formatResponse) {\r\n        response = options.formatResponse(response, options)\r\n      }\r\n      return response\r\n    })\r\n  } catch (executionError) {\r\n    logFunction({ action: LogAction.execute, step: LogStep.end })\r\n    logFunction({ action: LogAction.request, step: LogStep.end })\r\n    return Promise.resolve({\r\n      errors: format([executionError], options.formatError)\r\n    })\r\n  }\r\n}\r\n","// graphql handler, called from listen func when useGraphql is set to true\r\nexport default async function graphQlHandler({\r\n  server,\r\n  args,\r\n  _useGraphql,\r\n  _internal,\r\n  PubSub,\r\n  makeExecutableSchema,\r\n  getIntrospectSchema,\r\n  createHttpLink,\r\n  HttpLink,\r\n  fetch,\r\n  introspectSchema,\r\n  makeRemoteExecutableSchema,\r\n  mergeSchemas,\r\n  bodyParser,\r\n  graphiqlExpress,\r\n  graphqlExpress,\r\n  SubscriptionServer,\r\n  SubscriptionClient,\r\n  ws,\r\n  getMainDefinition,\r\n  split,\r\n  os,\r\n  print,\r\n  execute,\r\n  subscribe,\r\n  Promise,\r\n  _injected,\r\n  _Instance,\r\n  _version\r\n}) {\r\n  // init executableSchema, if directives length !== to their resolvers, throw error\r\n  let executableSchema = null\r\n  const directives = _useGraphql._graphQlDirectives\r\n  if (directives.length !== Object.keys(_useGraphql.directiveResolvers).length) {\r\n    throw new Error(`Directive resolvers registered does not match directive declarations`)\r\n  }\r\n  const enums = _useGraphql._graphQlEnums\r\n  const schemas = _useGraphql._graphQlSchemas.schemas\r\n  // use default pubsub for subscriptions if one is not passed\r\n  const pubsub = _useGraphql.pubsub || new PubSub()\r\n  // init graphql object, pass all app.inject to it and pubsub\r\n  const finalGraphQlOptionsObject = {\r\n    schema: executableSchema,\r\n    logger: _useGraphql.logger,\r\n    context: Object.assign({}, _injected, { pubsub }),\r\n    tracing: _useGraphql.tracing,\r\n    cacheControl: _useGraphql.cacheControl,\r\n    directiveResolvers: _useGraphql.directiveResolvers\r\n  }\r\n  // if remote endpoints is empty create local schemas, if not empty, create remote schemas\r\n  if (_useGraphql._graphQlRemoteEndpoints.length === 0) {\r\n    if (_useGraphql._graphQlExecutableSchema) {\r\n      // if schema passed from outside use it\r\n      executableSchema = _useGraphql._graphQlExecutableSchema\r\n    } else {\r\n      // create schema, run on all data received and assemble a valid schema\r\n      let Directives = ``\r\n      let Query = `type Query{\\n`\r\n      let Mutation = `type Mutation{\\n`\r\n      let Subscription = `type Subscription{\\n`\r\n      let Types = ``\r\n      let Enums = ``\r\n      let resolvers = { Query: {}, Mutation: {}, Subscription: {} }\r\n      enums.map((Enum) => {\r\n        Enums += `enum ${Enum.name}{\\n${Enum.options.map((option) => `\\t${option}\\n`).join('')}}\\n`\r\n      })\r\n      directives.map((dir) => {\r\n        Directives += dir.includes('directive') ? `${dir}\\n` : `directive ${dir}\\n`\r\n      })\r\n      schemas.map((schema) => {\r\n        const schemaProps = schema.getObjProps()\r\n        Query += `\\t${schemaProps.query}\\n`\r\n        Mutation += `\\t${schemaProps.mutation}\\n`\r\n        Subscription += `\\t${schemaProps.subscription}\\n`\r\n        Types += `${schemaProps.type}\\n`\r\n        if (schemaProps.resolver) {\r\n          const { Query, Mutation, Subscription, ...props } = schemaProps.resolver\r\n          if (Query) {\r\n            Object.assign(resolvers.Query, typeof Query === 'function' ? Query(pubsub) : Query)\r\n          }\r\n          if (Mutation) {\r\n            Object.assign(\r\n              resolvers.Mutation,\r\n              typeof Mutation === 'function' ? Mutation(pubsub) : Mutation\r\n            )\r\n          }\r\n          if (Subscription) {\r\n            Object.assign(\r\n              resolvers.Subscription,\r\n              typeof Subscription === 'function' ? Subscription(pubsub) : Subscription\r\n            )\r\n          }\r\n          Object.assign(resolvers, props)\r\n        }\r\n      })\r\n      Query += '}'\r\n      Mutation += '}'\r\n      Subscription += '}'\r\n      const typeDefs = `${Directives}\\n${Enums}\\n${Types}\\n${Query}\\n${Mutation}\\n${Subscription}`\r\n      finalGraphQlOptionsObject.rootValue = resolvers\r\n      executableSchema = makeExecutableSchema({\r\n        typeDefs,\r\n        resolvers,\r\n        directiveResolvers: _useGraphql.directiveResolvers\r\n      })\r\n      _useGraphql._graphQlExecutableSchema = executableSchema\r\n    }\r\n  } else {\r\n    const getIntrospectSchemaWithParams = getIntrospectSchema({\r\n      HttpLink,\r\n      fetch,\r\n      SubscriptionClient,\r\n      ws,\r\n      getMainDefinition,\r\n      split,\r\n      introspectSchema,\r\n      makeRemoteExecutableSchema\r\n    })\r\n    // if allowPartialRemoteSchema, catch all errors to allow partial schemas fetching\r\n    if (_useGraphql.allowPartialRemoteSchema) {\r\n      executableSchema = await Promise.map(_useGraphql._graphQlRemoteEndpoints, async (ep) => {\r\n        try {\r\n          return await getIntrospectSchemaWithParams(ep)\r\n        } catch (e) {\r\n          _useGraphql.logger.log(e)\r\n        }\r\n      }).filter((item) => item !== undefined)\r\n    } else {\r\n      // if allowPartialRemoteSchema is false, fire promise all, if something fails, all fails\r\n      executableSchema = await Promise.all(\r\n        _useGraphql._graphQlRemoteEndpoints.map((ep) => getIntrospectSchemaWithParams(ep))\r\n      )\r\n    }\r\n    // merge remote schemas\r\n    executableSchema = mergeSchemas({ schemas: executableSchema })\r\n    _useGraphql._graphQlExecutableSchema = executableSchema\r\n  }\r\n  // create bliz router and add middleware and graphiql and graphql to it\r\n  const router = _Instance.createRouter('/').middleware(bodyParser.json())\r\n  if (_useGraphql.useGraphiql) {\r\n    const graphiqlRoute = _Instance.createPath(_useGraphql.graphiqlRoute).handler(\r\n      graphiqlExpress({\r\n        endpointURL: _useGraphql.graphqlRoute,\r\n        subscriptionsEndpoint: `ws://localhost:${args[0]}${_useGraphql.subscriptionsEndpoint}`\r\n      })\r\n    )\r\n    router.get(graphiqlRoute)\r\n  }\r\n  finalGraphQlOptionsObject.schema = executableSchema\r\n  const graphqlRoute = _Instance.createPath(_useGraphql.graphqlRoute).handler(\r\n    graphqlExpress((req) => {\r\n      // pass headers and body to context\r\n      Object.assign(finalGraphQlOptionsObject.context, { headers: req.headers, body: req.body })\r\n      return finalGraphQlOptionsObject\r\n    })\r\n  )\r\n  router.get(graphqlRoute).post(graphqlRoute)\r\n  _Instance.registerRouters(router)\r\n  _Instance.events.emit('log')\r\n  // same as http server, only add a subscription server for graphql subscriptions\r\n  if (args.length > 1) {\r\n    const server = server.listen.apply(server, args)\r\n    SubscriptionServer.create(\r\n      {\r\n        execute,\r\n        subscribe,\r\n        schema: _useGraphql._graphQlExecutableSchema\r\n      },\r\n      {\r\n        server: server,\r\n        path: _useGraphql.subscriptionsEndpoint\r\n      }\r\n    )\r\n    return server\r\n  } else {\r\n    server.listen.apply(server, [\r\n      args[0],\r\n      () =>\r\n        print([\r\n          `Listening on Bliz server ${_version} on port ${args[0]}`,\r\n          `Platform: ${os.platform()}`,\r\n          `Hostname: ${os.hostname()}`,\r\n          `Architecture: ${os.arch()}`,\r\n          `CPU Cores: ${os.cpus().length}`,\r\n          `Memory Free: ${(\r\n            os.freemem() /\r\n            1024 /\r\n            1024 /\r\n            (os.totalmem() / 1024 / 1024) *\r\n            100\r\n          ).toFixed(0)}%, ${(os.freemem() / 1024 / 1024).toFixed(0)} MB / ${(\r\n            os.totalmem() /\r\n            1024 /\r\n            1024\r\n          ).toFixed(0)} MB`\r\n        ])\r\n    ])\r\n    SubscriptionServer.create(\r\n      {\r\n        execute,\r\n        subscribe,\r\n        schema: _useGraphql._graphQlExecutableSchema\r\n      },\r\n      {\r\n        server: server,\r\n        path: _useGraphql.subscriptionsEndpoint\r\n      }\r\n    )\r\n    return server\r\n  }\r\n}\r\n","import { AssignHandler, GetObjProps } from '../objectFactories'\r\n\r\n// graphql schema creator\r\nconst GraphQlSchemaCreator = (type) => {\r\n  const _graphql = {}\r\n  const _pathData = {\r\n    type,\r\n    resolver: {},\r\n    mutation: ``,\r\n    subscription: ``,\r\n    mockSchema: null,\r\n    query: ``\r\n  }\r\n  return Object.assign(\r\n    _graphql,\r\n    AssignHandler({\r\n      name: 'resolver',\r\n      obj: _pathData.resolver,\r\n      chainLink: _graphql,\r\n      override: true\r\n    }),\r\n    AssignHandler({ name: 'mockSchema', obj: _pathData, chainLink: _graphql }),\r\n    AssignHandler({ name: 'mutation', obj: _pathData, chainLink: _graphql }),\r\n    AssignHandler({ name: 'subscription', obj: _pathData, chainLink: _graphql }),\r\n    AssignHandler({ name: 'query', obj: _pathData, chainLink: _graphql }),\r\n    GetObjProps(_pathData)\r\n  )\r\n}\r\n\r\nexport default GraphQlSchemaCreator\r\n","// default error handler handler\r\nimport { StructError } from '../main'\r\n\r\n// default handler for http\r\n// if error passed from handler fire it\r\n// else if got here -> 404\r\nconst defaultErrorHandler = (req, res, err) => {\r\n  if (err) {\r\n    res.statusCode = err.status || 500\r\n    if (err instanceof StructError) {\r\n      res.json({\r\n        error: err.message,\r\n        path: err.path,\r\n        dataPassed: err.data,\r\n        valueReceived: err.value,\r\n        typeExpected: err.type\r\n      })\r\n    } else {\r\n      console.error(err)\r\n      res.json({ error: err.message })\r\n    }\r\n  } else {\r\n    res.statusCode = 404\r\n    res.json({ error: `${req.method.toUpperCase()} - ${req.url} not found...` })\r\n  }\r\n}\r\nexport default defaultErrorHandler\r\n","// main function\r\nfunction createHandler({\r\n  request,\r\n  response,\r\n  defaultHandler,\r\n  midHandler,\r\n  urlUtil,\r\n  handleNestedRoutersUtil,\r\n  populateParamsUtil,\r\n  populateQueryUtil,\r\n  populateUrlOptions,\r\n  _middleWares,\r\n  _routersObject,\r\n  _injected,\r\n  _Instance,\r\n  Promise\r\n}) {\r\n  // receive all middlewares from routers and apps if exist and concatanate them\r\n  _middleWares = _middleWares.reduce((prev, curr) => prev.concat(curr), [])\r\n  // handler to be passed to http.createServer\r\n  async function handler(req, res, next) {\r\n    // set proto of req and res to point to our req and res\r\n    req.__proto__ = request\r\n    res.__proto__ = response\r\n    // expose request and response to each other\r\n    response.req = req\r\n    request.res = res\r\n    if (!req.params) req.params = {}\r\n    if (!req.query) req.query = {}\r\n    // get url parts\r\n    let { method, splitRest } = urlUtil(req.url, req.method)\r\n    // check all url combinations possible\r\n    const urlCombinationOptions = populateUrlOptions(splitRest)\r\n    // get all middlewares collected on routers\r\n    const { baseOfRequest, rest, combinedRoutersMids } = handleNestedRoutersUtil(\r\n      urlCombinationOptions,\r\n      _routersObject\r\n    )\r\n    // populate req.query and return the final url to check on routers object\r\n    const finalRest = populateQueryUtil(req, rest) || rest\r\n    // populate req.params and return bool if need to skip param check or not\r\n    const { param, canSkipBecauseParams } = populateParamsUtil(\r\n      req,\r\n      _routersObject,\r\n      baseOfRequest,\r\n      method,\r\n      finalRest\r\n    )\r\n    // global middleware, if exists work with it, if throws error go to global handler\r\n    // check routers middleware\r\n    try {\r\n      // if global middlewares exists, execute them\r\n      if (_middleWares) {\r\n        await midHandler(Promise, req, res, _middleWares)\r\n      }\r\n      // if routers middlewares exist, execute them\r\n      if (combinedRoutersMids) {\r\n        await midHandler(Promise, req, res, combinedRoutersMids)\r\n      }\r\n    } catch (middleWareError) {\r\n      // in case of error in middlewares call defualt handler\r\n      return defaultHandler(req, res, middleWareError)\r\n    }\r\n    // something is not defined go to default handler\r\n    if (!canSkipBecauseParams) {\r\n      if (!_routersObject[baseOfRequest]) return defaultHandler(req, res)\r\n      if (!_routersObject[baseOfRequest][method]) return defaultHandler(req, res)\r\n      if (!_routersObject[baseOfRequest][method][finalRest]) return defaultHandler(req, res)\r\n    }\r\n    // current route after all checks\r\n    const currentRoute = _routersObject[baseOfRequest][method][\r\n      !canSkipBecauseParams ? finalRest : param\r\n    ].getObjProps()\r\n    // try router middleware => route middleware=> route handler=> if err check route err handler=>\r\n    // if err in err handler or err handler not exists => router err handler => if not go to global handler\r\n    try {\r\n      const { middleWareArr, describe, handler } = currentRoute\r\n      // if route middleware, execute\r\n      if (middleWareArr && middleWareArr.length > 0) {\r\n        await midHandler(Promise, req, res, middleWareArr)\r\n      }\r\n      // if validation schemes exist, execute them\r\n      if (describe && describe.incoming && describe.incoming.length > 0) {\r\n        for (let i = 0; i < describe.incoming.length; i++) {\r\n          let searchIn = ''\r\n          if (describe.incoming[i].in === 'path') {\r\n            searchIn = 'params'\r\n          } else {\r\n            searchIn = describe.incoming[i].in\r\n          }\r\n          describe.incoming[i].schema(req[searchIn])\r\n        }\r\n      }\r\n      // call handler with req, res and injected object from app.inject\r\n      if (describe && describe.incoming && describe.incoming.length > 0) {\r\n        const statusObject = {}\r\n        for (let schema of describe.outgoing) {\r\n          statusObject[schema.status] = schema.schema\r\n        }\r\n        Object.assign(res, { schema: statusObject })\r\n      }\r\n\r\n      await handler(req, res, _injected)\r\n    } catch (errorFromHandler) {\r\n      // here, it is the same as with middlewares but backwards, try route err handler, next up try router err handler and finally try global middleware\r\n      try {\r\n        if (currentRoute.errHandler) {\r\n          currentRoute.errHandler(req, res, errorFromHandler)\r\n        } else if (_routersObject[baseOfRequest].routerErrorHandler) {\r\n          _routersObject[baseOfRequest].routerErrorHandler(req, res, errorFromHandler)\r\n        } else {\r\n          defaultHandler(req, res, errorFromHandler)\r\n        }\r\n      } catch (errorFromErrorHandlers) {\r\n        defaultHandler(req, res, errorFromErrorHandlers)\r\n      }\r\n    }\r\n  }\r\n  return { handler }\r\n}\r\n\r\nexport default createHandler\r\n","import { struct } from 'superstruct'\r\nimport { assign } from '../utils'\r\n\r\nconst contactStruct = struct({\r\n  name: 'string?',\r\n  email: 'string?',\r\n  url: 'string?'\r\n})\r\n\r\nconst licenseStruct = struct({\r\n  name: 'string?',\r\n  url: 'string?'\r\n})\r\n\r\nconst serverStruct = struct({\r\n  url: 'string?',\r\n  description: 'string?'\r\n})\r\n\r\nconst infoStruct = struct({\r\n  title: 'string',\r\n  version: 'string',\r\n  description: 'string?',\r\n  termsOfService: 'string?',\r\n  contact: contactStruct,\r\n  license: licenseStruct\r\n})\r\n\r\nconst mainDescribeStruct = struct({\r\n  openapi: 'string',\r\n  security: 'array?',\r\n  info: infoStruct,\r\n  servers: [serverStruct]\r\n})\r\n\r\n// mainDescribe block\r\nconst mainDescribe = ({\r\n  title,\r\n  version,\r\n  description,\r\n  termsOfService,\r\n  contact,\r\n  license,\r\n  servers,\r\n  security\r\n}) => {\r\n  const validJson = {\r\n    openapi: '3.0.0',\r\n    security,\r\n    info: {\r\n      title,\r\n      version,\r\n      description,\r\n      termsOfService,\r\n      contact,\r\n      license\r\n    },\r\n    servers\r\n  }\r\n  return mainDescribeStruct(validJson)\r\n}\r\n\r\nconst singlePathMetaData = struct({\r\n  tags: ['string'],\r\n  description: 'string',\r\n  parameters: 'array?',\r\n  requestBody: 'object?',\r\n  summary: 'string?',\r\n  responses: 'object?'\r\n})\r\n\r\nconst methodStruct = (methodName) =>\r\n  struct({\r\n    [methodName === 'del' ? 'delete' : methodName]: singlePathMetaData\r\n  })\r\n\r\nconst pathStruct = (pathName, methodName) =>\r\n  struct({\r\n    [pathName]: methodStruct(methodName)\r\n  })\r\n\r\n// recurse on structs and populate object according to struct received\r\nconst getNested = (struct, map = {}) => {\r\n  const schema = (struct.schema && struct.schema.schema) || struct.schema\r\n  const keys = Object.keys(schema)\r\n  for (let key of keys) {\r\n    // console.log(key, schema[key])\r\n    if (schema[key].kind && schema[key].kind === 'object') {\r\n      const result = getNested(schema[key], {})\r\n      assign(map, [key, 'type'], 'object')\r\n      assign(map, [key, 'properties'], result)\r\n      // assign(map, [key], result)\r\n    } else if (schema[key].kind && schema[key].kind === 'list') {\r\n      // console.log(`schema[key]`, schema[key].type)\r\n      assign(map, [key, 'type'], 'array')\r\n      let type = schema[key].type.replace(/\\[|\\]/g, '')\r\n      assign(map, [key, 'items', 'type'], type.replace('?', ''))\r\n    } else if (schema[key].kind && schema[key].kind === 'enum') {\r\n      assign(map, [key, 'type'], 'string')\r\n      assign(\r\n        map,\r\n        [key, 'enum'],\r\n        schema[key].type.split('|').map((item) => item.replace(/\\\"/g, '').replace(/\\s/g, ''))\r\n      )\r\n    } else if (schema[key].kind && schema[key].kind === 'scalar') {\r\n      assign(map, [key], schema[key].type)\r\n    } else if (schema[key].kind && schema[key].kind === 'dict') {\r\n      assign(map, [key, 'type'], 'object')\r\n      const type = schema[key].type.replace(/dict\\<|\\>/g, '')\r\n      assign(map, [key, 'type'], type.substring(type.indexOf(',') + 1))\r\n    } else if (schema[key].kind && schema[key].kind === 'function') {\r\n    } else if (schema[key].kind && schema[key].kind === 'instance') {\r\n    } else if (schema[key].kind && schema[key].kind === 'interface') {\r\n    } else if (schema[key].kind && schema[key].kind === 'intersection') {\r\n      const types = schema[key].type\r\n        .split('&')\r\n        .map((item) => item.replace(/\\s/g, ''))\r\n        .map((item) => 'type: ' + item)\r\n      assign(map, [key, 'allOf'], types)\r\n    } else if (schema[key].kind && schema[key].kind === 'literal') {\r\n      // const types = schema[key].type.replace(/literal:|\\s/g, '')\r\n      // assign(map, [key, 'type'], types)\r\n    } else if (schema[key].kind && schema[key].kind === 'lazy') {\r\n    } else if (schema[key].kind && schema[key].kind === 'tuple') {\r\n    } else if (schema[key].kind && schema[key].kind === 'union') {\r\n      const types = schema[key].type\r\n        .split('|')\r\n        .map((item) => item.replace(/\\s/g, ''))\r\n        .map((item) => 'type: ' + item)\r\n      assign(map, [key, 'anyOf'], types)\r\n    } else {\r\n      // console.log(key, schema[key])\r\n      // console.log(`assigning type array`, key, schema[key])\r\n      assign(map, [key, 'type'], schema[key].replace('?', ''))\r\n      if (schema[key] === 'array') {\r\n        assign(map, [key, 'items', 'type'], 'object')\r\n      }\r\n    }\r\n  }\r\n  // console.log(`map:`, map)\r\n  return map\r\n}\r\n\r\n// add request schema based on path, method and request object\r\nconst addRequest = (request, path, method) => {\r\n  // console.log(`REQUEST: `, request)\r\n  if (!request) return\r\n  return {\r\n    content: {\r\n      [request.contentType || 'application/json']: {\r\n        schema: {\r\n          $ref: `#/components/schemas/${path\r\n            .replace(/\\//g, '')\r\n            .replace(/-/, '')\r\n            .replace(/[{|}]/g, '')}-body-${method}`\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// build response object\r\nconst responseBuilder = (responses, path, method) => {\r\n  const responseObject = {}\r\n  for (let resp of responses) {\r\n    responseObject[resp.status] = {\r\n      description: `${resp.status}`,\r\n      content: {\r\n        [resp.contentType || 'application/json']: {\r\n          schema: {\r\n            $ref: `#/components/schemas/${path\r\n              .replace(/\\//g, '')\r\n              .replace(/-/, '')\r\n              .replace(/[{|}]/g, '')}-${resp.status}-${method}`\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return responseObject\r\n}\r\n\r\n// describe path based on data received\r\nconst pathDescribe = ({\r\n  path,\r\n  method,\r\n  tags,\r\n  description,\r\n  summary,\r\n  incoming,\r\n  requestBody,\r\n  outgoing\r\n}) => {\r\n  // console.log(Object.keys(requests[0].schema.schema))\r\n  const myRegexp = /(:.+?)([\\/]|$)/g\r\n  const swaggerPath = path.replace(myRegexp, function(...args) {\r\n    return args[0].replace(args[1], `{${args[1].replace(':', '')}}`)\r\n  })\r\n  const bodyRequests = incoming.filter((request) => request.in === 'body')\r\n  const parametersRequests = incoming.filter((request) => ['path', 'query'].includes(request.in))\r\n  const injectedPathWithParams = pathStruct(swaggerPath, method)\r\n  const parametersToInject = parametersRequests\r\n    .map((request) => {\r\n      // const all\r\n      const arrayToConcat = []\r\n      const map = getNested(request, {})\r\n      const keys = Object.keys(map)\r\n      for (let key of keys) {\r\n        const obj = {}\r\n        obj.name = key\r\n        obj.in = request.in\r\n        obj.required = !map[key]['type'].includes('?')\r\n        obj.schema = {}\r\n        obj.schema.type = map[key]['type'].replace('?', '')\r\n        arrayToConcat.push(obj)\r\n      }\r\n      return arrayToConcat\r\n      // console.log(objectToReturn)\r\n    })\r\n    .reduce((prev, curr) => prev.concat(curr), [])\r\n\r\n  const jsonWithParams = {\r\n    [swaggerPath]: {\r\n      [method === 'del' ? 'delete' : method]: {\r\n        tags,\r\n        description,\r\n        summary,\r\n        requestBody: addRequest(bodyRequests[0], swaggerPath, method),\r\n        parameters: parametersToInject.length > 0 ? parametersToInject : undefined,\r\n        responses: responseBuilder(outgoing, swaggerPath, method)\r\n      }\r\n    }\r\n  }\r\n  return injectedPathWithParams(jsonWithParams)\r\n}\r\n\r\n// schema builder according to describe.requests object and describe.responses\r\nconst schemas = (schemas, securitySchemes) => {\r\n  const schemasObject = {}\r\n  for (let sc of schemas) {\r\n    const data = getNested(sc)\r\n    schemasObject[sc.name] = data[Object.keys(data)[0]]\r\n  }\r\n  return {\r\n    components: {\r\n      securitySchemes,\r\n      schemas: schemasObject\r\n    }\r\n  }\r\n}\r\nexport { pathDescribe, schemas, mainDescribe }\r\n","import { AssignHandler, GetObjProps, CreateObjectArray } from '../objectFactories'\r\n\r\nimport { checkBaseUtil } from '../utils'\r\n\r\n// path creator\r\nconst PathCreator = (path) => {\r\n  const _PathReturn = {}\r\n  const _pathData = {\r\n    middleWareArr: [],\r\n    path: checkBaseUtil(path),\r\n    describe: {},\r\n    handler: null,\r\n    errHandler: null,\r\n    parent: null\r\n  }\r\n  return Object.assign(\r\n    _PathReturn,\r\n    AssignHandler({\r\n      name: 'describe',\r\n      obj: _pathData.describe,\r\n      chainLink: _PathReturn,\r\n      override: true\r\n    }),\r\n    AssignHandler({\r\n      name: 'parent',\r\n      obj: _pathData.parent,\r\n      chainLink: _PathReturn,\r\n      override: true\r\n    }),\r\n    CreateObjectArray({ name: 'middleware', arr: _pathData.middleWareArr, chainLink: _PathReturn }),\r\n    AssignHandler({ name: 'handler', obj: _pathData, chainLink: _PathReturn }),\r\n    AssignHandler({ name: 'errHandler', obj: _pathData, chainLink: _PathReturn }),\r\n    GetObjProps(_pathData)\r\n  )\r\n}\r\n\r\nexport default PathCreator\r\n","import http from 'http'\r\n\r\nconst req = Object.create(http.IncomingMessage.prototype)\r\n\r\nexport default req\r\n","import http from 'http'\r\nimport etag from 'etag'\r\n\r\nconst res = Object.create(http.ServerResponse.prototype)\r\n\r\nres.status = function(status) {\r\n  this.statusCode = status\r\n  return this\r\n}\r\n\r\nres.json = function(data) {\r\n  // console.log(this.req.headers)\r\n  this.setHeader('Content-Type', 'application/json')\r\n  this.setHeader('X-Powered-By', 'Bliz')\r\n  const stringified = JSON.stringify(data, null, 3)\r\n  const generatedEtag = etag(stringified)\r\n  // console.log(generatedEtag, this.req.headers.etag)\r\n  this.setHeader('ETag', generatedEtag)\r\n  this.end(stringified)\r\n}\r\n\r\n// res.vjson = function(data){\r\n//   console.log(this, data, this.statusCode)\r\n//   if(this.schema[this.statusCode]){\r\n//     this.schema[this.statusCode](data)\r\n//   }else {\r\n//     console.warn('no matching schema for status ' + this.statusCode)\r\n//     this.json(data)\r\n//   }\r\n// }\r\n\r\nexport default res\r\n","import {\r\n  CreateArray,\r\n  CreateObjectArray,\r\n  AssignHandler,\r\n  GetObjProps,\r\n  Method\r\n} from '../objectFactories'\r\nimport { checkBaseUtil } from '../utils'\r\n\r\n// router creator\r\nconst RouterCreator = (base) => {\r\n  const _RouterReturn = {}\r\n  const _routerData = {\r\n    base: checkBaseUtil(base),\r\n    get: {},\r\n    post: {},\r\n    put: {},\r\n    del: {},\r\n    middleWareArr: [],\r\n    subRouters: [],\r\n    routerErrorHandler: null\r\n  }\r\n  return Object.assign(\r\n    _RouterReturn,\r\n    Method('get', _routerData, _RouterReturn),\r\n    Method('post', _routerData, _RouterReturn),\r\n    Method('put', _routerData, _RouterReturn),\r\n    Method('del', _routerData, _RouterReturn),\r\n    AssignHandler({ name: 'routerErrorHandler', obj: _routerData, chainLink: _RouterReturn }),\r\n    CreateObjectArray({\r\n      name: 'middleware',\r\n      arr: _routerData.middleWareArr,\r\n      chainLink: _RouterReturn\r\n    }),\r\n    CreateArray({ name: 'subRouter', obj: _routerData.subRouters, chainLink: _RouterReturn }),\r\n    GetObjProps(_routerData)\r\n  )\r\n}\r\n\r\nexport default RouterCreator\r\n","// package json\r\nimport 'babel-polyfill'\r\nimport packgeJson from '../package.json'\r\n\r\n// http dependencies\r\nimport RouterCreator from './http/router'\r\nimport PathCreator from './http/path'\r\nimport defaultHandler from './http/defaultHandler'\r\nimport CreateHandler from './http/handler'\r\nimport request from './http/request'\r\nimport response from './http/response'\r\nimport midHandler, { socketMiddlewareHandler } from './middlewareHandler'\r\nimport SocketRouterCreator from './sockets/socketRouter'\r\nimport SocketListenerCreator from './sockets/socketListener'\r\nimport socketHandler from './sockets/socketHandler'\r\n\r\n// graphql dependencies\r\nimport GraphQlCreator from './graphql/graphQlSchema'\r\nimport graphqlHandler from './graphql/graphQlHandler'\r\nimport { graphqlExpress, graphiqlExpress } from './apolloServer/main'\r\nimport {\r\n  makeExecutableSchema,\r\n  mergeSchemas,\r\n  makeRemoteExecutableSchema,\r\n  introspectSchema\r\n} from 'graphql-tools'\r\nimport { getIntrospectSchema } from './utils'\r\nimport ws from 'ws'\r\nimport { split } from 'apollo-client-preset'\r\nimport { getMainDefinition } from 'apollo-utilities'\r\nimport { SubscriptionServer, SubscriptionClient } from 'subscriptions-transport-ws'\r\nimport { execute, subscribe } from 'graphql'\r\nimport { PubSub } from 'graphql-subscriptions'\r\nimport fetch from 'node-fetch'\r\nimport { createHttpLink, HttpLink } from 'apollo-link-http'\r\n\r\n// app dependencies\r\nimport * as factories from './objectFactories'\r\nimport * as utils from './utils'\r\nimport RegisterRouters from './registerRouters'\r\nimport { pathDescribe, mainDescribe, schemas } from './http/openApi'\r\nimport bodyParser from 'body-parser'\r\nimport http from 'http'\r\nimport fs from 'fs'\r\nimport treeify from 'treeify'\r\nimport { struct, superstruct, StructError } from 'superstruct'\r\nimport EventEmitter from 'eventemitter2'\r\nimport Promise from 'bluebird'\r\nimport { stringify } from 'json-to-pretty-yaml'\r\nimport print from 'print-message'\r\nimport os from 'os'\r\nimport io from 'socket.io'\r\n\r\nconst httpDependencies = {\r\n  RouterCreator,\r\n  PathCreator,\r\n  defaultHandler,\r\n  CreateHandler,\r\n  request,\r\n  response,\r\n  midHandler,\r\n  pathDescribe,\r\n  mainDescribe,\r\n  schemas\r\n}\r\n\r\nconst graphqlDependencies = {\r\n  GraphQlCreator,\r\n  graphqlExpress,\r\n  graphiqlExpress,\r\n  graphqlHandler,\r\n  SubscriptionServer,\r\n  execute,\r\n  subscribe,\r\n  PubSub,\r\n  mergeSchemas,\r\n  makeRemoteExecutableSchema,\r\n  getIntrospectSchema,\r\n  fetch,\r\n  introspectSchema,\r\n  createHttpLink,\r\n  HttpLink,\r\n  SubscriptionClient,\r\n  ws,\r\n  getMainDefinition,\r\n  split\r\n}\r\n\r\nconst socketDependencies = {\r\n  SocketListenerCreator,\r\n  SocketRouterCreator,\r\n  socketMiddlewareHandler,\r\n  socketHandler\r\n}\r\n\r\nconst superStructObject = {\r\n  struct,\r\n  superstruct,\r\n  StructError\r\n}\r\n\r\nconst appDependencies = {\r\n  bodyParser,\r\n  http,\r\n  io,\r\n  makeExecutableSchema,\r\n  fs,\r\n  treeify,\r\n  EventEmitter,\r\n  Promise,\r\n  stringify,\r\n  print,\r\n  os,\r\n  packgeJson,\r\n  RegisterRouters\r\n}\r\n\r\n// combining all dependencies to one object for convenience.\r\nconst BlizAppParams = {\r\n  ...utils,\r\n  ...factories,\r\n  ...httpDependencies,\r\n  ...graphqlDependencies,\r\n  ...socketDependencies,\r\n  ...appDependencies,\r\n  superStructObject\r\n}\r\n\r\n// main instance creator, returns an instance of bliz app\r\n// using concatanative inheritance + RORO (receive object return object)\r\nconst BlizApp = (BlizAppParams) => {\r\n  // internal information\r\n  // _Instance - all instance data\r\n  // _injected - all data passed, will be injected to all handlers\r\n  // _options - options object, still did not implement anything for it\r\n  // _loggerEntity - holds the structure of sockets and http routes when calling pretty print\r\n  const _internal = {\r\n    _version: BlizAppParams.packgeJson.version,\r\n    _Instance: {},\r\n    _injected: {},\r\n    _options: {},\r\n    _loggerEntity: { sockets: {}, http: {} }\r\n  }\r\n  // socekt.io object, _socketSubApps was not yet implemented\r\n  const _useSockets = {\r\n    useSockets: false,\r\n    delimiter: ':',\r\n    _socketRoutersObject: {},\r\n    _socketMiddlewares: [],\r\n    _socketSubApps: []\r\n  }\r\n  // graphql config object\r\n  const _useGraphql = {\r\n    useGraphql: false,\r\n    graphqlRoute: '/graphql',\r\n    graphiqlRoute: '/graphiql',\r\n    _graphQlRemoteEndpoints: [],\r\n    _graphQlExecutableSchema: null,\r\n    _graphQlSchemas: {},\r\n    _graphQlDirectives: [],\r\n    _graphQlEnums: [],\r\n    subscriptionsEndpoint: '/subscriptions',\r\n    useGraphiql: true,\r\n    logger: { log: (e) => console.log(`Error from graphql: `, e) },\r\n    directiveResolvers: {},\r\n    tracing: true,\r\n    cacheControl: {\r\n      defaultMaxAge: 5\r\n    }\r\n  }\r\n  // http object, _describe is added by each component as .describe, used for swagger.yaml generation\r\n  const _useHttp = {\r\n    useSwagger: false,\r\n    _middleWares: [],\r\n    _routersObject: {},\r\n    _describe: {},\r\n    _subApps: []\r\n  }\r\n\r\n  // entire app data, used when calling getObjProps() on app\r\n  const _appData = {\r\n    _useSockets,\r\n    _useGraphql,\r\n    _useHttp\r\n  }\r\n\r\n  // binding all data and dependencies to the http handler\r\n  const _createHandler = CreateHandler.bind(this, { ...BlizAppParams, ..._useHttp })\r\n  // destructuring for passing to allow chaining on methods\r\n  const { _Instance, _options, _injected, _loggerEntity, _version } = _internal\r\n\r\n  // call all function and pass dependencies to them and compose methods, put all on the Instance object\r\n  return Object.assign(\r\n    _Instance,\r\n    BlizAppParams.CreateNewObjOf({ name: 'GraphQlSchema', obj: GraphQlCreator }),\r\n    BlizAppParams.CreateNewObjOf({\r\n      name: 'SocketRouter',\r\n      obj: SocketRouterCreator,\r\n      dependencies: { ...BlizAppParams }\r\n    }),\r\n    BlizAppParams.CreateNewObjOf({\r\n      name: 'SocketListener',\r\n      obj: SocketListenerCreator,\r\n      dependencies: { ...BlizAppParams }\r\n    }),\r\n    BlizAppParams.CreateNewObjOf({\r\n      name: 'Router',\r\n      obj: RouterCreator,\r\n      dependencies: { ...BlizAppParams }\r\n    }),\r\n    BlizAppParams.CreateNewObjOf({\r\n      name: 'Path',\r\n      obj: PathCreator,\r\n      dependencies: { ...BlizAppParams }\r\n    }),\r\n    BlizAppParams.AssignHandler({\r\n      name: 'sockets',\r\n      obj: _useSockets,\r\n      chainLink: _Instance,\r\n      override: true\r\n    }),\r\n    BlizAppParams.AssignHandler({\r\n      name: 'graphql',\r\n      obj: _useGraphql,\r\n      chainLink: _Instance,\r\n      override: true\r\n    }),\r\n    BlizAppParams.AssignHandler({\r\n      name: 'describe',\r\n      obj: _useHttp._describe,\r\n      chainLink: _Instance,\r\n      override: true\r\n    }),\r\n    BlizAppParams.AssignHandler({\r\n      name: 'options',\r\n      obj: _options,\r\n      chainLink: _Instance,\r\n      override: true\r\n    }),\r\n    BlizAppParams.AssignHandler({\r\n      name: 'inject',\r\n      obj: _injected,\r\n      chainLink: _Instance,\r\n      override: true\r\n    }),\r\n    BlizAppParams.CreateObjectArray({\r\n      name: 'middleware',\r\n      arr: _useHttp._middleWares,\r\n      chainLink: _Instance\r\n    }),\r\n    BlizAppParams.CreateObjectArray({\r\n      name: 'socketMiddleware',\r\n      arr: _useSockets._socketMiddlewares,\r\n      chainLink: _Instance\r\n    }),\r\n    BlizAppParams.CreateArray({ name: 'subApp', arr: _useHttp._subApps, chainLink: _Instance }),\r\n    BlizAppParams.CreateArray({\r\n      name: 'enum',\r\n      arr: _useGraphql._graphQlEnums,\r\n      chainLink: _Instance\r\n    }),\r\n    BlizAppParams.CreateArray({\r\n      name: 'directive',\r\n      arr: _useGraphql._graphQlDirectives,\r\n      chainLink: _Instance\r\n    }),\r\n    BlizAppParams.CreateSwagger({ ..._appData, ...BlizAppParams, _Instance }),\r\n    BlizAppParams.PrettyPrint({ ..._appData, ...BlizAppParams, _Instance, _loggerEntity }),\r\n    BlizAppParams.RegisterRouters({ ..._appData, ...BlizAppParams, _Instance }),\r\n    BlizAppParams.EventsCreator(BlizAppParams.EventEmitter),\r\n    BlizAppParams.GetObjProps(_appData),\r\n    BlizAppParams.Listen({\r\n      _createHandler,\r\n      ..._appData,\r\n      ...BlizAppParams,\r\n      _Instance,\r\n      _version,\r\n      _injected\r\n    })\r\n  )\r\n}\r\n\r\n// exposed factory to create a new instance\r\nconst BlizCreator = () => {\r\n  return Object.assign({}, BlizApp(BlizAppParams))\r\n}\r\n\r\n// expose factory and superstruct for validation, request + response for extending http req and res\r\nexport default BlizCreator\r\nexport { request, response, struct, superstruct, StructError }\r\n","// next function that resolves if called next(), if next is called with args it rejects, like in express\r\nfunction next(resolve, reject, ...args) {\r\n  if (args.length > 0) return reject(args[0])\r\n  return resolve()\r\n}\r\n\r\n// race the timeout promise with the promise provided, used to timeout the middlewares\r\nconst promiseTimeout = (promise, ms, throwError) => {\r\n  // Create a promise that rejects in <ms> milliseconds\r\n  let timeout = new Promise((resolve, reject) => {\r\n    let id = setTimeout(() => {\r\n      clearTimeout(id)\r\n      const err = new Error('Timed out in ' + ms + 'ms.')\r\n      throwError ? reject(err) : resolve('Timed out in ' + ms + 'ms.')\r\n    }, ms)\r\n  })\r\n\r\n  // Returns a race between our timeout and the passed in promise\r\n  return Promise.race([promise, timeout])\r\n}\r\n\r\n// handler for express middlewares with next...\r\nasync function midHandler(Promise, req, res, arr) {\r\n  for (let item of arr) {\r\n    const { fn, timeout, throwError } = item\r\n    const handlerPromise = new Promise((resolve, reject) =>\r\n      fn(req, res, next.bind(this, resolve, reject))\r\n    )\r\n    const data = await promiseTimeout(handlerPromise, timeout, throwError)\r\n  }\r\n}\r\n\r\n// handler for socket middlewares with next\r\nasync function socketMiddlewareHandler(Promise, io, socket, msg, cb, arr) {\r\n  // run on middleware array and wait for each sequentially\r\n  for (let item of arr) {\r\n    const { fn, timeout, throwError } = item\r\n    const handlerPromise = new Promise((resolve, reject) =>\r\n      fn(io, socket, msg, cb, next.bind(this, resolve, reject))\r\n    )\r\n    await promiseTimeout(handlerPromise, timeout, throwError)\r\n  }\r\n}\r\n\r\nexport { socketMiddlewareHandler }\r\nexport default midHandler\r\n","// receive an http and a handler and return a listen func\r\nconst Listen = (dependencies) => ({\r\n  createServer: (...args) => {\r\n    const {\r\n      http: { createServer },\r\n      _createHandler\r\n    } = dependencies\r\n    const { handler } = _createHandler()\r\n    const server = createServer(handler)\r\n    return server\r\n  },\r\n  // listen function that starts the app\r\n  // if sockets -> use socket handler\r\n  // else if graphql -> use graphql handler\r\n  // else -> use http handler\r\n  // on each handler fire log event, used to notify log listener to log after all routes and middlewares have been processed and app is ready.\r\n  listen: (...args) => {\r\n    const {\r\n      http: { createServer },\r\n      io,\r\n      socketHandler,\r\n      graphqlHandler,\r\n      _createHandler,\r\n      _useSockets,\r\n      _version,\r\n      _useGraphql,\r\n      _Instance,\r\n      print,\r\n      os\r\n    } = dependencies\r\n    const { handler } = _createHandler()\r\n    const server = createServer(handler)\r\n    if (_useSockets.useSockets) {\r\n      _useSockets.io = io\r\n      return socketHandler({ server, args, ...dependencies })\r\n    } else if (_useGraphql.useGraphql) {\r\n      return graphqlHandler({ server, args, ...dependencies })\r\n    } else {\r\n      _Instance.events.emit('log')\r\n      if (args.length > 1) {\r\n        return server.listen.apply(server, args)\r\n      } else {\r\n        // print os information and Bliz information\r\n        return server.listen.apply(server, [\r\n          args[0],\r\n          () =>\r\n            print([\r\n              `Listening on Bliz server ${_version} on port ${args[0]}`,\r\n              `Platform: ${os.platform()}`,\r\n              `Hostname: ${os.hostname()}`,\r\n              `Architecture: ${os.arch()}`,\r\n              `CPU Cores: ${os.cpus().length}`,\r\n              `Memory Free: ${(os.freemem() / os.totalmem() * 100).toFixed(0)}%, ${(\r\n                os.freemem() /\r\n                1024 /\r\n                1024\r\n              ).toFixed(0)} MB / ${(os.totalmem() / 1024 / 1024).toFixed(0)} MB`\r\n            ])\r\n        ])\r\n      }\r\n    }\r\n  }\r\n})\r\n\r\n// TODO: implement cluster support on sockets\r\nconst Cluster = ({ _version }) => ({\r\n  // stage 1\r\n  // get options\r\n  // get routers, schemas\r\n  // open redis client\r\n  // ask redis for bliz cluster version\r\n  // if same version - continue\r\n  // else - different versions between cluster servers, throw error (update server)\r\n  // stage 2\r\n  // create server hash\r\n  // write hash to redis\r\n  // stage 3\r\n  // open redis subscriber for divide work\r\n  // open redis subscriber for receive work\r\n  // stage 4\r\n  // when query comes, round robin or options to choose random server (subscribers / hash ??)\r\n  // fire divide work event to chosen server\r\n  // if chosen master\r\n  // divide work totalSchemas / registered servers on cluster\r\n})\r\n\r\n// pretty print all app routes\r\nconst PrettyPrint = ({\r\n  _useHttp,\r\n  _useSockets,\r\n  _Instance,\r\n  _loggerEntity,\r\n  populateObjectWithTreeUtil,\r\n  treeify\r\n}) => ({\r\n  prettyPrint: (logger = console.log) => {\r\n    _Instance.events.once('log', () =>\r\n      setImmediate(() => {\r\n        populateObjectWithTreeUtil(\r\n          _useHttp._routersObject,\r\n          ['get', 'post', 'put', 'del'],\r\n          _loggerEntity.http\r\n        )\r\n        populateObjectWithTreeUtil(\r\n          _useSockets._socketRoutersObject,\r\n          ['event'],\r\n          _loggerEntity.sockets,\r\n          _useSockets.delimiter\r\n        )\r\n        logger(treeify.asTree(_loggerEntity))\r\n      }, 0)\r\n    )\r\n    return _Instance\r\n  }\r\n})\r\n\r\n// method creator for router\r\nconst Method = (name, object, chainLink) => ({\r\n  [name]: (data) => {\r\n    object[name][data.getObjProps().path] = data\r\n    return chainLink\r\n  }\r\n})\r\n\r\n// create swagger yaml\r\n// run on all routers and describe blocks and assemble swagger.yaml\r\n// mainDescribe -> takes info from app.describe()\r\n// pathDescribe -> takes info from path.describe()\r\nconst CreateSwagger = ({\r\n  _useHttp,\r\n  _Instance,\r\n  stringify,\r\n  mainDescribe,\r\n  _describe,\r\n  pathDescribe,\r\n  schemas,\r\n  fs\r\n}) => ({\r\n  swagger: (swaggerOptions) => {\r\n    let yaml = ''\r\n    _useHttp.swagger = true\r\n    const { _routersObject, _describe } = _useHttp\r\n    yaml += stringify(mainDescribe(_describe))\r\n    const routersKeys = Object.keys(_routersObject)\r\n    const mainPathsObject = { paths: {} }\r\n    const schemasObject = []\r\n    for (let key of routersKeys) {\r\n      const options = ['get', 'post', 'put', 'del']\r\n      const router = _routersObject[key]\r\n      for (let method of options) {\r\n        const paths = Object.keys(router[method])\r\n        for (let path of paths) {\r\n          const fullPath = router.base + path\r\n          const describe = router[method][path].getObjProps().describe\r\n          const responseObjectsForSchema = describe.incoming.filter(\r\n            (request) => request.in === 'body'\r\n          )\r\n          if (responseObjectsForSchema.length > 0) {\r\n            responseObjectsForSchema.map((response) => {\r\n              const obj = {}\r\n              const name = `${fullPath\r\n                .replace(/\\//g, '')\r\n                .replace(/-/, '')\r\n                .replace(/[:]/g, '')}-body-${method}`\r\n              obj.name = name\r\n              // obj.department = 'requestBodies'\r\n              obj.schema = Object.assign({}, response.schema)\r\n              schemasObject.push(obj)\r\n            })\r\n          }\r\n          describe.outgoing.map((response) => {\r\n            const obj = {}\r\n            const name = `${fullPath\r\n              .replace(/\\//g, '')\r\n              .replace(/-/, '')\r\n              .replace(/[{:}]/g, '')}-${response.status}-${method}`\r\n            obj.name = name\r\n            // obj.department = 'responses'\r\n            obj.schema = Object.assign({}, response.schema)\r\n            schemasObject.push(obj)\r\n          })\r\n\r\n          const fullObj = Object.assign({}, describe, { method, path: fullPath })\r\n          Object.assign(mainPathsObject.paths, pathDescribe(fullObj))\r\n        }\r\n      }\r\n      yaml += stringify(mainPathsObject)\r\n      yaml += stringify(schemas(schemasObject))\r\n      // console.log(yaml)\r\n      // console.log(swaggerOptions)\r\n      if (swaggerOptions && swaggerOptions.absoluteFilePath) {\r\n        fs.writeFileSync(swaggerOptions.absoluteFilePath, yaml, 'utf8')\r\n      }\r\n    }\r\n    return _Instance\r\n  }\r\n})\r\n\r\n// assign creator\r\nconst AssignHandler = ({ name, obj, chainLink, override = false }) => ({\r\n  [name]: (data) => {\r\n    override ? Object.assign(obj, data) : (obj[name] = data)\r\n    // console.log(`DATA AFTER: `, object, name, data)\r\n    return chainLink\r\n  }\r\n})\r\n\r\n// list object properties\r\nconst GetObjProps = (obj) => ({\r\n  getObjProps: () => obj\r\n})\r\n\r\n// create event emmiter 2 instance (supports regexes)\r\nconst EventsCreator = (EventEmitter) => ({\r\n  events: new EventEmitter({ wildcard: true })\r\n})\r\n\r\n// when called, receives an object\r\n// returns new object\r\nconst CreateNewObjOf = ({ name, obj, dependencies = {} }) => ({\r\n  [`create${name}`]: (data) => {\r\n    return Object.assign({}, obj(data, ...dependencies))\r\n  }\r\n})\r\n\r\n// pushes data to array\r\nconst CreateArray = ({ name, arr, chainLink }) => ({\r\n  [name]: (data) => {\r\n    arr.push(data)\r\n    return chainLink\r\n  }\r\n})\r\n\r\n// pushes data to middleware array with default timeout of 5s and throwError set to true if timeout occures\r\nconst CreateObjectArray = ({ name, arr, chainLink }) => ({\r\n  [name]: (fn, timeout = 5000, throwError = true) => {\r\n    arr.push({ fn, timeout, throwError })\r\n    return chainLink\r\n  }\r\n})\r\n\r\nexport {\r\n  AssignHandler,\r\n  CreateArray,\r\n  CreateNewObjOf,\r\n  Method,\r\n  GetObjProps,\r\n  Listen,\r\n  PrettyPrint,\r\n  EventsCreator,\r\n  CreateSwagger,\r\n  CreateObjectArray\r\n}\r\n","// register routers func, returns 3 register routers methods, one for http, one for sockets and last one for graphql\r\nconst RegisterRouters = ({\r\n  _useGraphql,\r\n  _useHttp,\r\n  _injected,\r\n  _useSockets,\r\n  _Instance,\r\n  populateSubAppsUtil,\r\n  populateRoutersUtil,\r\n  populateSocketRoutersUtil\r\n}) => ({\r\n  registerRouters: (...routers) => {\r\n    // populate subApps object with sub apps passed\r\n    const { _middleWares, _routersObject, _subApps } = _useHttp\r\n    populateSubAppsUtil(_middleWares, _routersObject, _subApps)\r\n    // populate globalRoutesObject with routers passed\r\n    populateRoutersUtil(_routersObject, routers)\r\n    return _Instance\r\n  },\r\n  registerSocketRouters: (...routers) => {\r\n    // console.log(routers)\r\n    // TODO: add sub apps socket routers\r\n    const { _socketRoutersObject } = _useSockets\r\n    const { delimiter } = _useSockets\r\n    populateSocketRoutersUtil(_socketRoutersObject, routers, null, delimiter)\r\n    // console.log(_socketRoutersObject)\r\n    return _Instance\r\n  },\r\n  registerGraphQlSchemas: (...schemas) => {\r\n    // if remote endpoints set, do not allow local schemas to be registered\r\n    const { _graphQlRemoteEndpoints } = _useGraphql\r\n    if (_graphQlRemoteEndpoints.length > 0) {\r\n      throw new Error(\r\n        'you may only registerGraphQlSchemas or registerRemoteGraphQlSchemas, not either'\r\n      )\r\n    } else {\r\n      Object.assign(_useGraphql._graphQlSchemas, { schemas })\r\n    }\r\n    return _Instance\r\n  },\r\n  registerRemoteGraphQlSchemas: (...endpoints) => {\r\n    // if local endpoints set, do not allow remote schemas to be registered\r\n    if (Object.keys(_useGraphql._graphQlSchemas).length > 0) {\r\n      throw new Error(\r\n        'you may only registerGraphQlSchemas or registerRemoteGraphQlSchemas, not either'\r\n      )\r\n    } else {\r\n      _useGraphql._graphQlRemoteEndpoints = endpoints\r\n      // console.log(endpoints)\r\n    }\r\n    return _Instance\r\n  }\r\n})\r\nexport default RegisterRouters\r\n","// socket handler, called from listen when use sockets is set to true\r\nconst socketHandler = ({\r\n  _useSockets,\r\n  _Instance,\r\n  _injected,\r\n  server,\r\n  _version,\r\n  args,\r\n  os,\r\n  print,\r\n  socketMiddlewareHandler,\r\n  checkSubRouters\r\n}) => {\r\n  const injectedIo = _useSockets.io(server)\r\n  if (args.length > 1) {\r\n    server.listen.apply(server, args)\r\n  } else {\r\n    server.listen.apply(server, [\r\n      args[0],\r\n      () =>\r\n        print([\r\n          `Listening on Bliz server ${_version} on port ${args[0]}`,\r\n          `Platform: ${os.platform()}`,\r\n          `Hostname: ${os.hostname()}`,\r\n          `Architecture: ${os.arch()}`,\r\n          `CPU Cores: ${os.cpus().length}`,\r\n          `Memory Free: ${(\r\n            os.freemem() /\r\n            1024 /\r\n            1024 /\r\n            (os.totalmem() / 1024 / 1024) *\r\n            100\r\n          ).toFixed(0)}%, ${(os.freemem() / 1024 / 1024).toFixed(0)} MB / ${(\r\n            os.totalmem() /\r\n            1024 /\r\n            1024\r\n          ).toFixed(0)} MB`\r\n        ])\r\n    ])\r\n  }\r\n\r\n  // on connection add all routers and middlewares\r\n  injectedIo.on('connection', (socket) => {\r\n    const routersKeys = Object.keys(_useSockets._socketRoutersObject)\r\n    for (let key of routersKeys) {\r\n      const eventKeys = Object.keys(_useSockets._socketRoutersObject[key].event)\r\n      for (let eventKey of eventKeys) {\r\n        socket.on(`${key}${_useSockets.delimiter}${eventKey}`, async (msg, cb) => {\r\n          try {\r\n            const chosenEvent = _useSockets._socketRoutersObject[key].event[eventKey].getObjProps()\r\n            if (_useSockets._socketMiddlewares && _useSockets._socketMiddlewares.length > 0) {\r\n              await socketMiddlewareHandler(\r\n                Promise,\r\n                injectedIo,\r\n                socket,\r\n                msg,\r\n                cb,\r\n                _useSockets._socketMiddlewares\r\n              )\r\n            }\r\n            let combinedMiddlewareArray = []\r\n            key\r\n              .split(_useSockets.delimiter)\r\n              .map(\r\n                (prefix) =>\r\n                  _useSockets._socketRoutersObject[prefix]\r\n                    ? checkSubRouters(\r\n                        _useSockets._socketRoutersObject[prefix],\r\n                        combinedMiddlewareArray\r\n                      )\r\n                    : void 0\r\n              )\r\n\r\n            combinedMiddlewareArray = combinedMiddlewareArray.reduce((prev, curr) =>\r\n              prev.concat(curr)\r\n            )\r\n            if (combinedMiddlewareArray && combinedMiddlewareArray.length > 0) {\r\n              await socketMiddlewareHandler(\r\n                Promise,\r\n                injectedIo,\r\n                socket,\r\n                msg,\r\n                cb,\r\n                combinedMiddlewareArray\r\n              )\r\n            }\r\n            if (chosenEvent.middleWareArr && chosenEvent.middleWareArr.length > 0) {\r\n              await socketMiddlewareHandler(\r\n                Promise,\r\n                injectedIo,\r\n                socket,\r\n                msg,\r\n                cb,\r\n                chosenEvent.middleWareArr\r\n              )\r\n            }\r\n            await chosenEvent.handler(injectedIo, socket, msg, cb, _injected)\r\n          } catch (e) {\r\n            console.log(e)\r\n          }\r\n        })\r\n      }\r\n    }\r\n    socket.on('disconnect', () => {})\r\n  })\r\n  _Instance.events.emit('log')\r\n  return injectedIo\r\n}\r\n\r\nexport default socketHandler\r\n","import { CreateObjectArray, AssignHandler, GetObjProps } from '../objectFactories'\r\n\r\n// socket listener creator\r\nconst CreateSocketListener = (path) => {\r\n  const _PathReturn = {}\r\n  const pathData = {\r\n    middleWareArr: [],\r\n    path,\r\n    handler: null,\r\n    errHandler: null\r\n  }\r\n  return Object.assign(\r\n    _PathReturn,\r\n    CreateObjectArray({ name: 'middleware', arr: pathData.middleWareArr, chainLink: _PathReturn }),\r\n    AssignHandler({ name: 'handler', obj: pathData, chainLink: _PathReturn }),\r\n    AssignHandler({ name: 'errHandler', obj: pathData, chainLink: _PathReturn }),\r\n    GetObjProps(pathData)\r\n  )\r\n}\r\n\r\nexport default CreateSocketListener\r\n","import {\r\n  CreateObjectArray,\r\n  CreateArray,\r\n  AssignHandler,\r\n  GetObjProps,\r\n  Method\r\n} from '../objectFactories'\r\n\r\n// socket router creator\r\nconst SocketRouterCreator = (base) => {\r\n  const _RouterReturn = {}\r\n  const routerData = {\r\n    base,\r\n    event: {},\r\n    middleWareArr: [],\r\n    subRouters: [],\r\n    routerErrorHandler: null\r\n  }\r\n  return Object.assign(\r\n    _RouterReturn,\r\n    Method('event', routerData, _RouterReturn),\r\n    AssignHandler({ name: 'routerErrorHandler', obj: routerData, chainLink: _RouterReturn }),\r\n    CreateObjectArray({\r\n      name: 'middleware',\r\n      arr: routerData.middleWareArr,\r\n      chainLink: _RouterReturn\r\n    }),\r\n    CreateArray({ name: 'socketSubRouter', arr: routerData.subRouters, chainLink: _RouterReturn }),\r\n    GetObjProps(routerData)\r\n  )\r\n}\r\n\r\nexport default SocketRouterCreator\r\n","// check url, split by /, return split url and method to lower case\r\nconst urlUtil = (url, methodUpperCase) => {\r\n  const dividedUrl = url.split('/')\r\n  let method = methodUpperCase.toLowerCase()\r\n  if (method === 'delete') method = 'del'\r\n  let splitRest = dividedUrl.slice(1).map((each) => `/${each}`)\r\n  splitRest.unshift('/')\r\n  splitRest = checkBaseUtil(splitRest)\r\n  return {\r\n    method,\r\n    splitRest\r\n  }\r\n}\r\n\r\n// get remote schemas for schema stitching with graphql\r\nconst getIntrospectSchema = ({\r\n  HttpLink,\r\n  SubscriptionClient,\r\n  fetch,\r\n  ws,\r\n  getMainDefinition,\r\n  split,\r\n  introspectSchema,\r\n  makeRemoteExecutableSchema\r\n}) => async (remoteSchema) => {\r\n  const httpLink = new HttpLink({ uri: remoteSchema.url, fetch })\r\n  const wsLink = new SubscriptionClient(\r\n    remoteSchema.ws,\r\n    {\r\n      reconnect: true\r\n    },\r\n    ws\r\n  )\r\n\r\n  const link = split(\r\n    ({ query }) => {\r\n      const { kind, operation } = getMainDefinition(query)\r\n      return kind === 'OperationDefinition' && operation === 'subscription'\r\n    },\r\n    wsLink,\r\n    httpLink\r\n  )\r\n  const schema = await introspectSchema(httpLink)\r\n\r\n  const executableSchema = makeRemoteExecutableSchema({\r\n    schema,\r\n    link\r\n  })\r\n\r\n  return executableSchema\r\n}\r\n\r\n// used by pretty print to populate object with data received\r\nconst populateObjectWithTreeUtil = (entity, options, objectToAddTo, delimiter) => {\r\n  const keysOfEntity = Object.keys(entity)\r\n  for (let key of keysOfEntity) {\r\n    let obj = {}\r\n    for (let option of options) {\r\n      let routeValues = Object.keys(entity[key][option])\r\n      if (routeValues.length > 0) {\r\n        let routeKey = delimiter || option.toUpperCase()\r\n        let value = {}\r\n        for (let route of routeValues) {\r\n          value[route] = ''\r\n          const assignedOption = { [`${[routeKey]}`]: value }\r\n          Object.assign(obj, assignedOption)\r\n          objectToAddTo[key] = obj\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// recurse on routers object and populate obj passed\r\nconst populateSocketRoutersUtil = (obj, routers, parent = null, delimiter) => {\r\n  // console.log(`obj: `, obj, `routers: `, routers, `parent: `, parent)\r\n  const innerRouterObj = {}\r\n  routers.map((router) => {\r\n    let list = router.getObjProps()\r\n    innerRouterObj[parent ? `${parent}${delimiter}${list.base}` : list.base] = list\r\n    // console.log(`inner object`, innerRouterObj)\r\n    if (list.subRouters.length > 0) {\r\n      return populateSocketRoutersUtil(\r\n        obj,\r\n        list.subRouters,\r\n        parent ? (parent += ':' + list.base) : list.base,\r\n        delimiter\r\n      )\r\n    }\r\n  })\r\n  Object.assign(obj, innerRouterObj)\r\n}\r\n\r\n// recurse on routers object and populate obj passed\r\nconst populateRoutersUtil = (obj, routers, parent = null) => {\r\n  // console.log(obj, routers, parent)\r\n  const innerRouterObj = {}\r\n  routers.map((router) => {\r\n    let list = router.getObjProps()\r\n    innerRouterObj[parent ? `${parent}${list.base}`.replace('//', '/') : list.base] = list\r\n    if (list.subRouters.length > 0) {\r\n      return populateRoutersUtil(obj, list.subRouters, parent ? (parent += list.base) : list.base)\r\n    }\r\n  })\r\n  Object.assign(obj, innerRouterObj)\r\n}\r\n\r\n// recurse on sub apps, populate routers and middlewares\r\nconst populateSubAppsUtil = (mds, routes, subApps) => {\r\n  subApps.map((subApp) => {\r\n    const data = subApp.getObjProps()\r\n    const _middlewares = data._middleWares\r\n    const _routersObject = data._routersObject\r\n    Object.assign(routes, _routersObject)\r\n    mds.push(_middlewares)\r\n    const innerSubApps = data._subApps\r\n    if (innerSubApps.length > 0) {\r\n      return populateSubAppsUtil(mds, routes, innerSubApps)\r\n    }\r\n  })\r\n}\r\n\r\n// nested routers handle test\r\nconst populateUrlOptions = (arr) => {\r\n  let startStr = ''\r\n  return arr.map((urlPart) => {\r\n    startStr += urlPart\r\n    startStr = startStr.replace('//', '/')\r\n    return startStr\r\n  })\r\n}\r\n\r\n// run on split url receives and check each part of the url, if it is defined\r\nconst handleNestedRoutersUtil = (splitUrl, routesObject, combinedRoutersMids = []) => {\r\n  let baseOfRequest\r\n  let rest = null\r\n  let lastDefinedRoute = null\r\n  // check each url in routes obj\r\n  for (let url of splitUrl) {\r\n    // if exists, get middleware\r\n    if (routesObject[url]) {\r\n      lastDefinedRoute = url\r\n      combinedRoutersMids.push(routesObject[url].middleWareArr)\r\n    }\r\n  }\r\n  const indexOfLastRoute = splitUrl.indexOf(lastDefinedRoute)\r\n  baseOfRequest = lastDefinedRoute\r\n  if (baseOfRequest) {\r\n    if (indexOfLastRoute === splitUrl.length - 1) {\r\n      rest = '/'\r\n    } else {\r\n      rest = splitUrl[splitUrl.length - 1]\r\n      rest = rest.substr(baseOfRequest.length)\r\n    }\r\n    if (baseOfRequest === '/') {\r\n      rest = `/${rest}`\r\n    }\r\n    rest = rest.replace('//', '/')\r\n  } else {\r\n    baseOfRequest = '/'\r\n    rest = '/'\r\n  }\r\n  // console.log(`BASE:${baseOfRequest},REST:${rest},LASTURI:${lastDefinedRoute}`)\r\n  // console.log(rest)\r\n  combinedRoutersMids = combinedRoutersMids.reduce((prev, curr) => prev.concat(curr), [])\r\n  return {\r\n    baseOfRequest,\r\n    rest,\r\n    combinedRoutersMids\r\n  }\r\n}\r\n\r\n// populate req.query from url\r\nconst populateQueryUtil = (req, urlArray) => {\r\n  if (urlArray.includes('?')) {\r\n    urlArray\r\n      .substring(urlArray.indexOf('?') + 1)\r\n      .split('&')\r\n      .map((query) => {\r\n        const keyValue = query.split('=')\r\n        req.query[keyValue[0]] = keyValue[1]\r\n      })\r\n    let urlToReturn = urlArray.substring(0, urlArray.indexOf('?'))\r\n    return checkBaseUtil(urlToReturn)\r\n  }\r\n}\r\n\r\n// if //, slice /\r\nconst checkBaseUtil = (base) => {\r\n  let newBase\r\n  if (base[base.length - 1] === '/' && base.length > 1) {\r\n    newBase = base.slice(0, base.length - 1)\r\n  } else {\r\n    newBase = base\r\n  }\r\n  return newBase\r\n}\r\n\r\nconst checkSubRouters = (router, array = []) => {\r\n  router = router.getObjProps ? router.getObjProps() : router\r\n  if (router.middleWareArr.length > 0) {\r\n    array.push(router.middleWareArr)\r\n  }\r\n  if (router.subRouters.length > 0) {\r\n    return router.subRouters.map((router) => checkSubRouters(router, array))\r\n  }\r\n}\r\n\r\n// populate params util and replace params to match original route\r\nconst populateParamsUtil = (req, routersObject, base, method, rest) => {\r\n  try {\r\n    let param\r\n    let canSkipBecauseParams = false\r\n    if (rest === '/') {\r\n      return { canSkipBecauseParams, param }\r\n    } else {\r\n      let arr = Object.keys(routersObject[base][method])\r\n      for (let path of arr) {\r\n        let splitArr = path.split('/')\r\n        let splitUrl = checkBaseUtil(rest).split('/')\r\n        if (splitArr.length === splitUrl.length) {\r\n          let counter = splitArr.length\r\n          let toBeCounted = 0\r\n          for (let i = 0, len = splitArr.length; i < len; i++) {\r\n            if (splitArr[i].includes(':')) {\r\n              toBeCounted += 1\r\n            } else if (splitArr[i] === splitUrl[i]) {\r\n              toBeCounted += 1\r\n            }\r\n          }\r\n          if (toBeCounted === counter) {\r\n            for (let i = 0, len = splitArr.length; i < len; i++) {\r\n              if (splitArr[i].includes(':')) {\r\n                req.params[splitArr[i].replace(':', '')] = splitUrl[i]\r\n                canSkipBecauseParams = true\r\n              }\r\n            }\r\n            param = path\r\n          }\r\n        }\r\n      }\r\n      return {\r\n        param,\r\n        canSkipBecauseParams\r\n      }\r\n    }\r\n  } catch (e) {\r\n    return {\r\n      param: null,\r\n      canSkipBecauseParams: false\r\n    }\r\n  }\r\n}\r\n\r\n// assign nested object properties util\r\nconst assign = (obj, keyPath, value) => {\r\n  let lastKeyIndex = keyPath.length - 1\r\n  for (let i = 0; i < lastKeyIndex; ++i) {\r\n    let key = keyPath[i]\r\n    if (!(key in obj)) obj[key] = {}\r\n    obj = obj[key]\r\n  }\r\n  obj[keyPath[lastKeyIndex]] = value\r\n}\r\n\r\nexport {\r\n  urlUtil,\r\n  populateRoutersUtil,\r\n  populateUrlOptions,\r\n  handleNestedRoutersUtil,\r\n  populateSubAppsUtil,\r\n  checkBaseUtil,\r\n  populateObjectWithTreeUtil,\r\n  populateQueryUtil,\r\n  populateParamsUtil,\r\n  populateSocketRoutersUtil,\r\n  checkSubRouters,\r\n  getIntrospectSchema,\r\n  assign\r\n}\r\n","module.exports = require(\"apollo-cache-control\");","module.exports = require(\"apollo-client-preset\");","module.exports = require(\"apollo-link-http\");","module.exports = require(\"apollo-server-module-graphiql\");","module.exports = require(\"apollo-tracing\");","module.exports = require(\"apollo-utilities\");","module.exports = require(\"babel-polyfill\");","module.exports = require(\"bluebird\");","module.exports = require(\"body-parser\");","module.exports = require(\"etag\");","module.exports = require(\"eventemitter2\");","module.exports = require(\"fs\");","module.exports = require(\"graphql\");","module.exports = require(\"graphql-extensions\");","module.exports = require(\"graphql-subscriptions\");","module.exports = require(\"graphql-tools\");","module.exports = require(\"http\");","module.exports = require(\"json-to-pretty-yaml\");","module.exports = require(\"node-fetch\");","module.exports = require(\"os\");","module.exports = require(\"path\");","module.exports = require(\"print-message\");","module.exports = require(\"socket.io\");","module.exports = require(\"subscriptions-transport-ws\");","module.exports = require(\"superstruct\");","module.exports = require(\"treeify\");","module.exports = require(\"url\");","module.exports = require(\"ws\");"],"sourceRoot":""}