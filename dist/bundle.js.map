{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./examples/graphql-example/Post/index.js","webpack:///./examples/graphql-example/Post/resolver.js","webpack:///./examples/graphql-example/Post/schema.js","webpack:///./examples/graphql-example/User/index.js","webpack:///./examples/graphql-example/User/resolver.js","webpack:///./examples/graphql-example/User/schema.js","webpack:///./examples/graphql-example/index.js","webpack:///./src/apolloServer/graphqlOptions.js","webpack:///./src/apolloServer/index.js","webpack:///./src/apolloServer/main.js","webpack:///./src/apolloServer/runHttpQuery.js","webpack:///./src/apolloServer/runQuery.js","webpack:///./src/graphql/graphQlHandler.js","webpack:///./src/graphql/graphQlSchema.js","webpack:///./src/http/defaultHandler.js","webpack:///./src/http/handler.js","webpack:///./src/http/openApi.js","webpack:///./src/http/path.js","webpack:///./src/http/request.js","webpack:///./src/http/response.js","webpack:///./src/http/router.js","webpack:///./src/main.js","webpack:///./src/middlewareHandler.js","webpack:///./src/objectFactories.js","webpack:///./src/registerRouters.js","webpack:///./src/sockets/socketHandler.js","webpack:///./src/sockets/socketListener.js","webpack:///./src/sockets/socketRouter.js","webpack:///./src/utils.js","webpack:///external \"apollo-cache-control\"","webpack:///external \"apollo-client-preset\"","webpack:///external \"apollo-link-http\"","webpack:///external \"apollo-server-module-graphiql\"","webpack:///external \"apollo-tracing\"","webpack:///external \"apollo-utilities\"","webpack:///external \"babel-polyfill\"","webpack:///external \"bluebird\"","webpack:///external \"body-parser\"","webpack:///external \"etag\"","webpack:///external \"eventemitter2\"","webpack:///external \"fs\"","webpack:///external \"graphql\"","webpack:///external \"graphql-extensions\"","webpack:///external \"graphql-subscriptions\"","webpack:///external \"graphql-tools\"","webpack:///external \"http\"","webpack:///external \"json-to-pretty-yaml\"","webpack:///external \"node-fetch\"","webpack:///external \"os\"","webpack:///external \"print-message\"","webpack:///external \"socket.io\"","webpack:///external \"subscriptions-transport-ws\"","webpack:///external \"superstruct\"","webpack:///external \"treeify\"","webpack:///external \"url\"","webpack:///external \"ws\""],"names":["PostSchema","app","createGraphQlSchema","postSchema","resolver","postResolver","query","mutation","subscription","Query","Post","obj","args","context","info","name","id","post","data","Subscription","pubsub","postAdded","subscribe","asyncIterator","Mutation","publish","input","schema","UserSchema","userSchema","userResolver","User","first_name","last_name","height","role","user","posts","createUser","root","deleteUser","prettyPrint","graphql","useGraphql","allowPartialRemoteSchema","useGraphiql","tracing","registerGraphQlSchemas","enum","options","directive","listen","Error","message","resolveGraphqlOptions","runQuery","LogFunction","LogMessage","LogStep","LogAction","runHttpQuery","HttpQueryError","graphqlExpress","graphiqlExpress","url","GraphiQL","arguments","length","graphqlHandler","req","res","method","body","then","gqlResponse","setHeader","Buffer","byteLength","toString","write","end","error","headers","Object","keys","forEach","header","statusCode","Handler","parse","resolveGraphiQLString","graphiqlString","handlerArguments","request","isGetRequest","optionsObject","formatErrorFn","formatError","requestPayload","Allow","isBatch","Array","isArray","requests","map","requestParams","extensions","JSON","undefined","persistedQuery","stringify","errors","isQueryOperation","operationName","variables","assign","create","getPrototypeOf","params","rootValue","logFunction","validationRules","formatResponse","fieldResolver","debug","cacheControl","formatParams","e","Promise","reject","resolve","all","responses","isGraphQLError","operationAST","operation","GraphQLResponse","validation","execute","start","status","action","step","key","QueryOptions","Function","doRunQuery","printStackTrace","console","stack","format","formatter","err","newError","documentAST","debugDefault","push","TracingExtension","CacheControlExtension","extensionStack","GraphQLExtensionStack","_extensionStack","requestDidStart","qry","syntaxError","rules","specifiedRules","concat","validationErrors","executionDidStart","result","response","executionDidEnd","requestDidEnd","executionError","server","_useGraphql","_internal","PubSub","makeExecutableSchema","getIntrospectSchema","createHttpLink","HttpLink","fetch","introspectSchema","makeRemoteExecutableSchema","mergeSchemas","bodyParser","SubscriptionServer","SubscriptionClient","ws","getMainDefinition","split","os","print","_injected","_Instance","_version","SchemaDirectiveVisitor","GraphQLScalarType","GraphQLNonNull","defaultFieldResolver","GraphQLString","executableSchema","directives","_graphQlDirectives","enums","_graphQlEnums","schemas","_graphQlSchemas","finalGraphQlOptionsObject","logger","directiveResolvers","_graphQlRemoteEndpoints","_graphQlExecutableSchema","Directives","Types","Enums","resolvers","Enum","option","join","dir","includes","schemaProps","getObjProps","type","props","typeDefs","visitSchemaDirectives","rest","field","wrapType","details","log","fields","getFields","source","call","isValid","getIntrospectSchemaWithParams","ep","filter","item","router","createRouter","middleware","json","graphiqlRoute","createPath","handler","endpointURL","graphqlRoute","subscriptionsEndpoint","get","registerRouters","events","emit","apply","path","platform","hostname","arch","cpus","freemem","totalmem","toFixed","graphQlHandler","GraphQlSchemaCreator","_graphql","_pathData","mockSchema","chainLink","override","defaultErrorHandler","StructError","dataPassed","valueReceived","value","typeExpected","toUpperCase","createHandler","next","__proto__","urlUtil","splitRest","urlCombinationOptions","populateUrlOptions","handleNestedRoutersUtil","_routersObject","baseOfRequest","combinedRoutersMids","finalRest","populateQueryUtil","populateParamsUtil","param","canSkipBecauseParams","_middleWares","midHandler","defaultHandler","currentRoute","middleWareArr","describe","incoming","i","searchIn","in","statusObject","outgoing","errHandler","routerErrorHandler","errorFromErrorHandlers","reduce","prev","curr","contactStruct","email","licenseStruct","serverStruct","description","infoStruct","title","version","termsOfService","contact","license","mainDescribeStruct","openapi","security","servers","mainDescribe","validJson","singlePathMetaData","tags","parameters","requestBody","summary","methodStruct","methodName","pathStruct","pathName","getNested","struct","kind","replace","substring","indexOf","types","addRequest","content","contentType","$ref","responseBuilder","responseObject","resp","pathDescribe","myRegexp","swaggerPath","bodyRequests","parametersRequests","injectedPathWithParams","parametersToInject","arrayToConcat","required","jsonWithParams","securitySchemes","schemasObject","sc","components","PathCreator","_PathReturn","parent","arr","http","IncomingMessage","prototype","ServerResponse","stringified","generatedEtag","RouterCreator","base","_RouterReturn","_routerData","put","del","subRouters","utils","factories","httpDependencies","CreateHandler","graphqlDependencies","GraphQlCreator","socketDependencies","SocketListenerCreator","SocketRouterCreator","socketMiddlewareHandler","socketHandler","superStructObject","superstruct","appDependencies","io","fs","treeify","EventEmitter","packgeJson","RegisterRouters","BlizAppParams","BlizApp","_options","_loggerEntity","sockets","_useSockets","useSockets","delimiter","_socketRoutersObject","_socketMiddlewares","_socketSubApps","defaultMaxAge","_useHttp","useSwagger","_describe","_subApps","_appData","_createHandler","bind","CreateNewObjOf","dependencies","AssignHandler","CreateObjectArray","CreateArray","CreateSwagger","PrettyPrint","EventsCreator","GetObjProps","Listen","BlizCreator","fn","timeout","throwError","handlerPromise","promiseTimeout","socket","msg","cb","promise","ms","setTimeout","clearTimeout","race","createServer","Cluster","populateObjectWithTreeUtil","once","setImmediate","asTree","Method","object","swagger","swaggerOptions","yaml","routersKeys","mainPathsObject","paths","fullPath","responseObjectsForSchema","fullObj","absoluteFilePath","writeFileSync","wildcard","populateSubAppsUtil","populateRoutersUtil","populateSocketRoutersUtil","routers","registerSocketRouters","registerRemoteGraphQlSchemas","endpoints","checkSubRouters","injectedIo","on","eventKeys","event","eventKey","chosenEvent","combinedMiddlewareArray","prefix","CreateSocketListener","pathData","routerData","methodUpperCase","dividedUrl","toLowerCase","slice","each","unshift","checkBaseUtil","remoteSchema","httpLink","uri","wsLink","reconnect","link","entity","objectToAddTo","keysOfEntity","routeValues","routeKey","route","assignedOption","innerRouterObj","list","mds","routes","subApps","subApp","_middlewares","innerSubApps","startStr","urlPart","splitUrl","routesObject","lastDefinedRoute","indexOfLastRoute","substr","urlArray","keyValue","urlToReturn","newBase","array","routersObject","splitArr","counter","toBeCounted","len","keyPath","lastKeyIndex"],"mappings":"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R,CAAV;AACA,QAAI,EAAEjK,OAAOpI,GAAT,CAAJ,EAAmBA,IAAIoI,GAAJ,IAAW,EAAX;AACnBpI,UAAMA,IAAIoI,GAAJ,CAAN;AACD;AACDpI,MAAI0gB,QAAQC,YAAR,CAAJ,IAA6BhQ,KAA7B;AACD,CARD;;QAWEM,O,GAAAA,O;QACA0L,mB,GAAAA,mB;QACAvL,kB,GAAAA,kB;QACAC,uB,GAAAA,uB;QACAqL,mB,GAAAA,mB;QACAyB,a,GAAAA,a;QACA3C,0B,GAAAA,0B;QACA9J,iB,GAAAA,iB;QACAC,kB,GAAAA,kB;QACAiL,yB,GAAAA,yB;QACAK,e,GAAAA,e;QACAxS,mB,GAAAA,mB;QACAjE,M,GAAAA,M;;;;;;;;;;;ACtRF,iD;;;;;;;;;;;ACAA,iD;;;;;;;;;;;ACAA,6C;;;;;;;;;;;ACAA,0D;;;;;;;;;;;ACAA,2C;;;;;;;;;;;ACAA,6C;;;;;;;;;;;ACAA,2C;;;;;;;;;;;ACAA,qC;;;;;;;;;;;ACAA,wC;;;;;;;;;;;ACAA,iC;;;;;;;;;;;ACAA,0C;;;;;;;;;;;ACAA,+B;;;;;;;;;;;ACAA,oC;;;;;;;;;;;ACAA,+C;;;;;;;;;;;ACAA,kD;;;;;;;;;;;ACAA,0C;;;;;;;;;;;ACAA,iC;;;;;;;;;;;ACAA,gD;;;;;;;;;;;ACAA,uC;;;;;;;;;;;ACAA,+B;;;;;;;;;;;ACAA,0C;;;;;;;;;;;ACAA,sC;;;;;;;;;;;ACAA,uD;;;;;;;;;;;ACAA,wC;;;;;;;;;;;ACAA,oC;;;;;;;;;;;ACAA,gC;;;;;;;;;;;ACAA,+B","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./examples/graphql-example/index.js\");\n","import postSchema from './schema'\r\nimport postResolver from './resolver'\r\n\r\nexport default function PostSchema (app) {\r\n  return app\r\n  .createGraphQlSchema(postSchema)\r\n  .resolver(postResolver)\r\n  .query(`Post(id: Int!): Post`)\r\n  .mutation(`Post(input: newPost): Post`)\r\n  .subscription(`postAdded: Post`)\r\n}\r\n","const resolver = {\r\n  Query:{\r\n      Post(obj, args, context, info){\r\n          return {name:'asdsda', id:args.id}\r\n      }\r\n  },\r\n  Post:{\r\n      name(post, args, context, info){\r\n          return post.name\r\n      },\r\n      id(post, args, context, info){\r\n          return post.id\r\n      },\r\n      data(post, args, context, info){\r\n          return post.data\r\n      }\r\n  },\r\n    Subscription:(pubsub)=> ({\r\n        postAdded: {\r\n        subscribe:()=>{\r\n            return pubsub.asyncIterator('POST_ADDED')\r\n        }\r\n        }\r\n    }),\r\n  Mutation:(pubsub)=>({\r\n    Post(obj, args, context, info){\r\n        pubsub.publish('POST_ADDED', {postAdded: args.input});\r\n        return {...args.input}\r\n    }\r\n  })\r\n}\r\n\r\nexport default resolver\r\n","const schema = `\r\ntype Post{\r\n    name: String!\r\n    id: Int!\r\n    data: String\r\n}\r\ninput newPost{\r\n    name: String!\r\n    id: Int!\r\n    data: String\r\n}\r\n`\r\n\r\nexport default schema\r\n","import userSchema from './schema'\r\nimport userResolver from './resolver'\r\n\r\nexport default function UserSchema (app) {\r\n  return app.createGraphQlSchema(userSchema)\r\n  .resolver(userResolver)\r\n  .mutation(`\r\n      createUser(input: newUser): User\r\n      deleteUser(first_name: String!): User\r\n  `)\r\n  .query(`User(id: Int!): User`)\r\n}\r\n","const resolver = {\r\n  Query:{\r\n      User(obj, args, context, info){\r\n          return {first_name:'Yura', last_name:'Khomyakov', height: \"tall\", role: 'Admin'}\r\n      }\r\n  },\r\n  User:{\r\n      first_name(user, args, context, info){\r\n          return user.first_name\r\n      },\r\n      last_name(user, args, context, info){\r\n          return user.last_name\r\n      },\r\n      role(user){\r\n          return user.role\r\n      },\r\n      posts(user, args, context, info){\r\n          return [{name:'post', id:1, data:'data'}]\r\n      }\r\n  },\r\n  Mutation:(pubsub)=>({\r\n      createUser(root, { input }, context){\r\n          return input\r\n      },\r\n      deleteUser(root, args, context){\r\n          return {first_name: args.first_name, last_name: 'whatever'}\r\n      },\r\n  })\r\n}\r\n\r\nexport default resolver\r\n","const schema = `\r\ntype User {\r\n  first_name: String! @hasRole(role: User)\r\n  role: Role! @hasRole(role: Admin)\r\n  last_name: String!\r\n  height: Height\r\n  posts: [Post] @hasRole(role: Admin)\r\n}\r\ninput newUser @rest {\r\n  first_name: String!\r\n  last_name: String!\r\n  height: String!\r\n}\r\n`\r\n\r\nexport default schema\r\n","import Bliz from '../../src/main'\r\n\r\nimport PostSchema from './Post'\r\nimport UserSchema from './User'\r\n\r\nconst app = Bliz()\r\n\r\napp\r\n.prettyPrint()\r\n.graphql({useGraphql: true, allowPartialRemoteSchema: true, useGraphiql: true, tracing: true})\r\n.registerGraphQlSchemas(UserSchema(app), PostSchema(app))\r\n.enum({name: 'Height', options: ['tall', 'short', 'average']})\r\n.enum({name: 'Role', options: ['Admin', 'User']})\r\n// .directive(`@hasRole(role: Role) on QUERY | FIELD`)\r\n// .directive(`@isAuthenticated on QUERY | FIELD`)\r\n// .directive(`@listen(max: Int!) on OBJECT | INPUT_FIELD_DEFINITION | FIELD_DEFINITION`)\r\n.directive(`@rest on FIELD_DEFINITION | INPUT_FIELD_DEFINITION | OBJECT | INPUT_OBJECT`)\r\n.listen(4000)\r\n","export async function resolveGraphqlOptions(options, ...args) {\r\n  if (typeof options === 'function') {\r\n    try {\r\n      return await options(...args)\r\n    } catch (e) {\r\n      throw new Error(`Invalid options provided to ApolloServer: ${e.message}`)\r\n    }\r\n  } else {\r\n    return options\r\n  }\r\n}\r\n","export { runQuery, LogFunction, LogMessage, LogStep, LogAction } from './runQuery'\r\nexport { runHttpQuery, HttpQueryError } from './runHttpQuery'\r\nexport { resolveGraphqlOptions } from './graphqlOptions'\r\n","import * as url from 'url'\r\nimport { GraphQLOptions, HttpQueryError, runHttpQuery } from './index'\r\nimport * as GraphiQL from 'apollo-server-module-graphiql'\r\n\r\nexport function graphqlExpress(options) {\r\n  if (!options) {\r\n    throw new Error('Apollo Server requires options.')\r\n  }\r\n\r\n  if (arguments.length > 1) {\r\n    // TODO: test this\r\n    throw new Error(`Apollo Server expects exactly one argument, got ${arguments.length}`)\r\n  }\r\n\r\n  const graphqlHandler = (req, res) => {\r\n    runHttpQuery([req, res], {\r\n      method: req.method,\r\n      options: options,\r\n      query: req.method === 'POST' ? req.body : req.query\r\n    }).then(\r\n      (gqlResponse) => {\r\n        res.setHeader('Content-Type', 'application/json')\r\n        res.setHeader('Content-Length', Buffer.byteLength(gqlResponse, 'utf8').toString())\r\n        res.write(gqlResponse)\r\n        res.end()\r\n      },\r\n      (error) => {\r\n        // if ('HttpQueryError' !== error.name) {\r\n        //   throw error\r\n        // }\r\n\r\n        if (error.headers) {\r\n          Object.keys(error.headers).forEach((header) => {\r\n            res.setHeader(header, error.headers[header])\r\n          })\r\n        }\r\n\r\n        res.statusCode = error.statusCode || 500\r\n        res.write(error.message)\r\n        res.end()\r\n      }\r\n    )\r\n  }\r\n\r\n  return graphqlHandler\r\n}\r\n\r\nexport function graphiqlExpress(options) {\r\n  const Handler = (req, res) => {\r\n    const query = req.url && url.parse(req.url, true).query\r\n    GraphiQL.resolveGraphiQLString(query, options, req).then(\r\n      (graphiqlString) => {\r\n        res.setHeader('Content-Type', 'text/html')\r\n        res.write(graphiqlString)\r\n        res.end()\r\n      },\r\n      (error) => {\r\n        throw error\r\n      }\r\n    )\r\n  }\r\n\r\n  return Handler\r\n}\r\n","import { parse, getOperationAST, DocumentNode, formatError, ExecutionResult } from 'graphql'\r\nimport { runQuery } from './runQuery'\r\nimport { default as GraphQLOptions, resolveGraphqlOptions } from './graphqlOptions'\r\n\r\nexport class HttpQueryError extends Error {\r\n  constructor(statusCode, message, isGraphQLError = false, headers) {\r\n    super(message)\r\n    this.name = 'HttpQueryError'\r\n    this.statusCode = statusCode\r\n    this.isGraphQLError = isGraphQLError\r\n    this.headers = headers\r\n  }\r\n}\r\n\r\nfunction isQueryOperation(query, operationName) {\r\n  const operationAST = getOperationAST(query, operationName)\r\n  return operationAST.operation === 'query'\r\n}\r\n\r\nexport async function runHttpQuery(handlerArguments, request) {\r\n  let isGetRequest = false\r\n  let optionsObject\r\n\r\n  try {\r\n    optionsObject = await resolveGraphqlOptions(request.options, ...handlerArguments)\r\n  } catch (e) {\r\n    throw new HttpQueryError(500, e.message)\r\n  }\r\n  const formatErrorFn = optionsObject.formatError || formatError\r\n  let requestPayload\r\n  switch (request.method) {\r\n    case 'POST':\r\n      if (!request.query || Object.keys(request.query).length === 0) {\r\n        throw new HttpQueryError(\r\n          500,\r\n          'POST body missing. Did you forget use body-parser middleware?'\r\n        )\r\n      }\r\n      requestPayload = request.query\r\n      break\r\n    case 'GET':\r\n      if (!request.query || Object.keys(request.query).length === 0) {\r\n        throw new HttpQueryError(400, 'GET query missing.')\r\n      }\r\n\r\n      isGetRequest = true\r\n      requestPayload = request.query\r\n      break\r\n\r\n    default:\r\n      throw new HttpQueryError(405, 'Apollo Server supports only GET/POST requests.', false, {\r\n        Allow: 'GET, POST'\r\n      })\r\n  }\r\n\r\n  let isBatch = true\r\n  // TODO: do something different here if the body is an array.\r\n  // Throw an error if body isn't either array or object.\r\n  if (!Array.isArray(requestPayload)) {\r\n    isBatch = false\r\n    requestPayload = [requestPayload]\r\n  }\r\n  const requests = requestPayload.map((requestParams) => {\r\n    try {\r\n      let query = requestParams.query\r\n      let extensions = requestParams.extensions\r\n      if (isGetRequest && extensions) {\r\n        // For GET requests, we have to JSON-parse extensions. (For POST\r\n        // requests they get parsed as part of parsing the larger body they're\r\n        // inside.)\r\n        try {\r\n          extensions = JSON.parse(extensions)\r\n        } catch (error) {\r\n          throw new HttpQueryError(400, 'Extensions are invalid JSON.')\r\n        }\r\n      }\r\n\r\n      if (query === undefined && extensions && extensions.persistedQuery) {\r\n        // It looks like we've received an Apollo Persisted Query. Apollo Server\r\n        // does not support persisted queries out of the box, so we should fail\r\n        // fast with a clear error saying that we don't support APQs. (A future\r\n        // version of Apollo Server may support APQs directly.)\r\n        throw new HttpQueryError(\r\n          // Return 200 to simplify processing: we want this to be intepreted by\r\n          // the client as data worth interpreting, not an error.\r\n          200,\r\n          JSON.stringify({\r\n            errors: [\r\n              {\r\n                message: 'PersistedQueryNotSupported'\r\n              }\r\n            ]\r\n          }),\r\n          true,\r\n          {\r\n            'Content-Type': 'application/json'\r\n          }\r\n        )\r\n      }\r\n\r\n      if (isGetRequest) {\r\n        if (typeof query === 'string') {\r\n          // preparse the query incase of GET so we can assert the operation.\r\n          // XXX This makes the type of 'query' in this function confused\r\n          //     which has led to us accidentally supporting GraphQL AST over\r\n          //     the wire as a valid query, which confuses users. Refactor to\r\n          //     not do this. Also, for a GET request, query really shouldn't\r\n          //     ever be anything other than a string or undefined, so this\r\n          //     set of conditionals doesn't quite make sense.\r\n          query = parse(query)\r\n        } else if (!query) {\r\n          // Note that we've already thrown a different error if it looks like APQ.\r\n          throw new HttpQueryError(400, 'Must provide query string.')\r\n        }\r\n\r\n        if (!isQueryOperation(query, requestParams.operationName)) {\r\n          throw new HttpQueryError(405, `GET supports only query operation`, false, {\r\n            Allow: 'POST'\r\n          })\r\n        }\r\n      }\r\n\r\n      const operationName = requestParams.operationName\r\n\r\n      let variables = requestParams.variables\r\n      if (typeof variables === 'string') {\r\n        try {\r\n          // XXX Really we should only do this for GET requests, but for\r\n          // compatibility reasons we'll keep doing this at least for now for\r\n          // broken clients that ship variables in a string for no good reason.\r\n          variables = JSON.parse(variables)\r\n        } catch (error) {\r\n          throw new HttpQueryError(400, 'Variables are invalid JSON.')\r\n        }\r\n      }\r\n\r\n      let context = optionsObject.context || {}\r\n      if (typeof context === 'function') {\r\n        context = context()\r\n      } else if (isBatch) {\r\n        context = Object.assign(Object.create(Object.getPrototypeOf(context)), context)\r\n      }\r\n      let params = {\r\n        schema: optionsObject.schema,\r\n        query: query,\r\n        variables: variables,\r\n        context,\r\n        rootValue: optionsObject.rootValue,\r\n        operationName: operationName,\r\n        logFunction: optionsObject.logFunction,\r\n        validationRules: optionsObject.validationRules,\r\n        formatError: formatErrorFn,\r\n        formatResponse: optionsObject.formatResponse,\r\n        fieldResolver: optionsObject.fieldResolver,\r\n        debug: optionsObject.debug,\r\n        tracing: optionsObject.tracing,\r\n        cacheControl: optionsObject.cacheControl\r\n      }\r\n\r\n      if (optionsObject.formatParams) {\r\n        params = optionsObject.formatParams(params)\r\n      }\r\n      return runQuery(params)\r\n    } catch (e) {\r\n      // Populate any HttpQueryError to our handler which should\r\n      // convert it to Http Error.\r\n      if (e.name === 'HttpQueryError') {\r\n        return Promise.reject(e)\r\n      }\r\n\r\n      return Promise.resolve({ errors: [formatErrorFn(e)] })\r\n    }\r\n  })\r\n  const responses = await Promise.all(requests)\r\n\r\n  if (!isBatch) {\r\n    const gqlResponse = responses[0]\r\n    if (gqlResponse.errors && typeof gqlResponse.data === 'undefined') {\r\n      throw new HttpQueryError(400, JSON.stringify(gqlResponse), true, {\r\n        'Content-Type': 'application/json'\r\n      })\r\n    }\r\n    return JSON.stringify(gqlResponse)\r\n  }\r\n\r\n  return JSON.stringify(responses)\r\n}\r\n","import {\r\n  GraphQLSchema,\r\n  GraphQLFieldResolver,\r\n  ExecutionResult,\r\n  DocumentNode,\r\n  parse,\r\n  print,\r\n  validate,\r\n  execute,\r\n  GraphQLError,\r\n  formatError,\r\n  specifiedRules,\r\n  ValidationContext\r\n} from 'graphql'\r\n\r\nimport {\r\n  enableGraphQLExtensions,\r\n  GraphQLExtension,\r\n  GraphQLExtensionStack\r\n} from 'graphql-extensions'\r\nimport { TracingExtension } from 'apollo-tracing'\r\nimport { CacheControlExtension, CacheControlExtensionOptions } from 'apollo-cache-control'\r\n\r\nexport const GraphQLResponse = {\r\n  data: {},\r\n  errors: [],\r\n  extensions: {}\r\n}\r\n\r\nexport const LogAction = {\r\n  request: '',\r\n  parse: '',\r\n  validation: '',\r\n  execute: ''\r\n}\r\n\r\nexport const LogStep = {\r\n  start: '',\r\n  end: '',\r\n  status: ''\r\n}\r\n\r\nexport const LogMessage = {\r\n  action: LogAction,\r\n  step: LogStep,\r\n  key: '',\r\n  data: {}\r\n}\r\n\r\nexport function LogFunction(message) {}\r\n\r\nexport const QueryOptions = {\r\n  schema: {},\r\n  query: '',\r\n  rootValue: {},\r\n  context: {},\r\n  variables: {},\r\n  operationName: '',\r\n  logFunction: LogFunction,\r\n  validationRules: [],\r\n  fieldResolver: {},\r\n  formatError: Function,\r\n  formatResponse: Function,\r\n  debug: false,\r\n  tracing: false,\r\n  cacheControl: false\r\n}\r\n\r\nexport function runQuery(options) {\r\n  // Fiber-aware Promises run their .then callbacks in Fibers.\r\n  return Promise.resolve().then(() => doRunQuery(options))\r\n}\r\n\r\nfunction printStackTrace(error) {\r\n  console.error(error.stack)\r\n}\r\n\r\nfunction format(errors, formatter) {\r\n  return errors.map((error) => {\r\n    if (formatter !== undefined) {\r\n      try {\r\n        return formatter(error)\r\n      } catch (err) {\r\n        console.error('Error in formatError function:', err)\r\n        const newError = new Error('Internal server error')\r\n        return formatError(newError)\r\n      }\r\n    } else {\r\n      return formatError(error)\r\n    }\r\n  })\r\n}\r\n\r\nfunction doRunQuery(options) {\r\n  let documentAST\r\n  const logFunction =\r\n    options.logFunction ||\r\n    function(...args) {\r\n      return args\r\n    }\r\n  const debugDefault = process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test'\r\n  const debug = options.debug !== undefined ? options.debug : debugDefault\r\n\r\n  logFunction({ action: LogAction.request, step: LogStep.start })\r\n  const context = options.context || {}\r\n  let extensions = []\r\n  if (options.tracing) {\r\n    extensions.push(TracingExtension)\r\n  }\r\n  if (options.cacheControl === true) {\r\n    extensions.push(CacheControlExtension)\r\n  } else if (options.cacheControl) {\r\n    extensions.push(new CacheControlExtension(options.cacheControl))\r\n  }\r\n  const extensionStack = extensions.length > 0 && new GraphQLExtensionStack(extensions)\r\n\r\n  if (extensionStack) {\r\n    context._extensionStack = extensionStack\r\n    enableGraphQLExtensions(options.schema)\r\n\r\n    extensionStack.requestDidStart()\r\n  }\r\n  const qry = typeof options.query === 'string' ? options.query : print(options.query)\r\n  logFunction({\r\n    action: LogAction.request,\r\n    step: LogStep.status,\r\n    key: 'query',\r\n    data: qry\r\n  })\r\n  logFunction({\r\n    action: LogAction.request,\r\n    step: LogStep.status,\r\n    key: 'variables',\r\n    data: options.variables\r\n  })\r\n  logFunction({\r\n    action: LogAction.request,\r\n    step: LogStep.status,\r\n    key: 'operationName',\r\n    data: options.operationName\r\n  })\r\n\r\n  // if query is already an AST, don't parse or validate\r\n  // XXX: This refers the operations-store flow.\r\n  if (typeof options.query === 'string') {\r\n    try {\r\n      logFunction({ action: LogAction.parse, step: LogStep.start })\r\n      documentAST = parse(options.query)\r\n      logFunction({ action: LogAction.parse, step: LogStep.end })\r\n    } catch (syntaxError) {\r\n      logFunction({ action: LogAction.parse, step: LogStep.end })\r\n      return Promise.resolve({\r\n        errors: format([syntaxError], options.formatError)\r\n      })\r\n    }\r\n  } else {\r\n    documentAST = options.query\r\n    let rules = specifiedRules\r\n    if (options.validationRules) {\r\n      rules = rules.concat(options.validationRules)\r\n    }\r\n    logFunction({ action: LogAction.validation, step: LogStep.start })\r\n    const validationErrors = validate(options.schema, documentAST, rules)\r\n    logFunction({ action: LogAction.validation, step: LogStep.end })\r\n    if (validationErrors.length) {\r\n      return Promise.resolve({\r\n        errors: format(validationErrors, options.formatError)\r\n      })\r\n    }\r\n\r\n    if (extensionStack) {\r\n      extensionStack.executionDidStart()\r\n    }\r\n  }\r\n  try {\r\n    logFunction({ action: LogAction.execute, step: LogStep.start })\r\n    return Promise.resolve(\r\n      execute(\r\n        options.schema,\r\n        documentAST,\r\n        options.rootValue,\r\n        context,\r\n        options.variables,\r\n        options.operationName,\r\n        options.fieldResolver\r\n      )\r\n    ).then((result) => {\r\n      logFunction({ action: LogAction.execute, step: LogStep.end })\r\n      logFunction({ action: LogAction.request, step: LogStep.end })\r\n\r\n      let response = {\r\n        data: result.data\r\n      }\r\n\r\n      if (result.errors) {\r\n        response.errors = format(result.errors, options.formatError)\r\n        if (debug) {\r\n          result.errors.map(printStackTrace)\r\n        }\r\n      }\r\n\r\n      if (extensionStack) {\r\n        extensionStack.executionDidEnd()\r\n        extensionStack.requestDidEnd()\r\n        response.extensions = extensionStack.format()\r\n      }\r\n\r\n      if (options.formatResponse) {\r\n        response = options.formatResponse(response, options)\r\n      }\r\n      return response\r\n    })\r\n  } catch (executionError) {\r\n    logFunction({ action: LogAction.execute, step: LogStep.end })\r\n    logFunction({ action: LogAction.request, step: LogStep.end })\r\n    return Promise.resolve({\r\n      errors: format([executionError], options.formatError)\r\n    })\r\n  }\r\n}\r\n","// graphql handler, called from listen func when useGraphql is set to true\r\nexport default async function graphQlHandler({\r\n  server,\r\n  args,\r\n  _useGraphql,\r\n  _internal,\r\n  PubSub,\r\n  makeExecutableSchema,\r\n  getIntrospectSchema,\r\n  createHttpLink,\r\n  HttpLink,\r\n  fetch,\r\n  introspectSchema,\r\n  makeRemoteExecutableSchema,\r\n  mergeSchemas,\r\n  bodyParser,\r\n  graphiqlExpress,\r\n  graphqlExpress,\r\n  SubscriptionServer,\r\n  SubscriptionClient,\r\n  ws,\r\n  getMainDefinition,\r\n  split,\r\n  os,\r\n  print,\r\n  execute,\r\n  subscribe,\r\n  Promise,\r\n  _injected,\r\n  _Instance,\r\n  _version,\r\n  SchemaDirectiveVisitor,\r\n  GraphQLScalarType, \r\n  GraphQLNonNull,\r\n  defaultFieldResolver,\r\n  GraphQLString\r\n}) {\r\n  // init executableSchema, if directives length !== to their resolvers, throw error\r\n  let executableSchema = null\r\n  const directives = _useGraphql._graphQlDirectives\r\n  // if (directives.length !== Object.keys(_useGraphql.directiveResolvers).length) {\r\n  //   throw new Error(`Directive resolvers registered does not match directive declarations`)\r\n  // }\r\n  const enums = _useGraphql._graphQlEnums\r\n  const schemas = _useGraphql._graphQlSchemas.schemas\r\n  // use default pubsub for subscriptions if one is not passed\r\n  const pubsub = _useGraphql.pubsub || new PubSub()\r\n  // init graphql object, pass all app.inject to it and pubsub\r\n  const finalGraphQlOptionsObject = {\r\n    schema: executableSchema,\r\n    logger: _useGraphql.logger,\r\n    context: Object.assign({}, _injected, { pubsub }),\r\n    tracing: _useGraphql.tracing,\r\n    cacheControl: _useGraphql.cacheControl,\r\n    directiveResolvers: _useGraphql.directiveResolvers\r\n  }\r\n  // if remote endpoints is empty create local schemas, if not empty, create remote schemas\r\n  if (_useGraphql._graphQlRemoteEndpoints.length === 0) {\r\n    if (_useGraphql._graphQlExecutableSchema) {\r\n      // if schema passed from outside use it\r\n      executableSchema = _useGraphql._graphQlExecutableSchema\r\n    } else {\r\n      // create schema, run on all data received and assemble a valid schema\r\n      let Directives = ``\r\n      let Query = `type Query{\\n`\r\n      let Mutation = `type Mutation{\\n`\r\n      let Subscription = `type Subscription{\\n`\r\n      let Types = ``\r\n      let Enums = ``\r\n      let resolvers = { Query: {}, Mutation: {}, Subscription: {} }\r\n      enums.map((Enum) => {\r\n        Enums += `enum ${Enum.name}{\\n${Enum.options.map((option) => `\\t${option}\\n`).join('')}}\\n`\r\n      })\r\n      directives.map((dir) => {\r\n        Directives += dir.includes('directive') ? `${dir}\\n` : `directive ${dir}\\n`\r\n      })\r\n      schemas.map((schema) => {\r\n        const schemaProps = schema.getObjProps()\r\n        if (schemaProps.query) {\r\n          Query += `\\t${schemaProps.query}\\n`\r\n        }\r\n        if (schemaProps.mutation) {\r\n          Mutation += `\\t${schemaProps.mutation}\\n`\r\n        }\r\n        if (schemaProps.subscription) {\r\n          Subscription += `\\t${schemaProps.subscription}\\n`\r\n        }\r\n        if (schemaProps.type) {\r\n          Types += `${schemaProps.type}\\n`\r\n        }\r\n        if (schemaProps.resolver) {\r\n          const { Query, Mutation, Subscription, ...props } = schemaProps.resolver\r\n          if (Query) {\r\n            Object.assign(resolvers.Query, typeof Query === 'function' ? Query(pubsub) : Query)\r\n          }\r\n          if (Mutation) {\r\n            Object.assign(\r\n              resolvers.Mutation,\r\n              typeof Mutation === 'function' ? Mutation(pubsub) : Mutation\r\n            )\r\n          }\r\n          if (Subscription) {\r\n            Object.assign(\r\n              resolvers.Subscription,\r\n              typeof Subscription === 'function' ? Subscription(pubsub) : Subscription\r\n            )\r\n          }\r\n          Object.assign(resolvers, props)\r\n        }\r\n      })\r\n      if (Object.keys(resolvers.Query).length === 0) {\r\n        delete resolvers.Query\r\n      }\r\n      if (Object.keys(resolvers.Mutation).length === 0) {\r\n        delete resolvers.Mutation\r\n      }\r\n      if (Object.keys(resolvers.Subscription).length === 0) {\r\n        delete resolvers.Subscription\r\n      }\r\n      Query += '}'\r\n      Mutation += '}'\r\n      Subscription += '}'\r\n      let typeDefs = ``\r\n      if (Directives !== ``) {\r\n        typeDefs += `${Directives}\\n`\r\n      }\r\n      if (Enums !== ``) {\r\n        typeDefs += `${Enums}\\n`\r\n      }\r\n      if (Types !== ``) {\r\n        typeDefs += `${Types}\\n`\r\n      }\r\n      if (Query !== `type Query{\\n}`) {\r\n        typeDefs += `${Query}\\n`\r\n      }\r\n      if (Mutation !== `type Mutation{\\n}`) {\r\n        typeDefs += `${Mutation}\\n`\r\n      }\r\n      if (Subscription !== `type Subscription{\\n}`) {\r\n        typeDefs += `${Subscription}\\n`\r\n      }\r\n      finalGraphQlOptionsObject.rootValue = resolvers\r\n      executableSchema = makeExecutableSchema({\r\n        typeDefs,\r\n        resolvers\r\n        // directiveResolvers: _useGraphql.directiveResolvers\r\n      })\r\n\r\n      SchemaDirectiveVisitor.visitSchemaDirectives(executableSchema, {\r\n        rest: class extends SchemaDirectiveVisitor {\r\n          visitInputFieldDefinition (field) {\r\n            this.wrapType(field)\r\n          }     \r\n          visitFieldDefinition (field, details) {\r\n            console.log(`visiting field definition with`, field, details)\r\n            this.wrapType(field)\r\n          }\r\n          visitInputObject (field) {\r\n            console.log(`inside visit input object`)\r\n            this.wrapType(field)\r\n          }\r\n          visitObject (field ){\r\n            console.log(`inside visit object`)\r\n            this.wrapType(field)\r\n          }\r\n          wrapType(field) {\r\n            const { resolve = defaultFieldResolver } = field\r\n            const fields = field.getFields()\r\n            const keys = Object.keys(fields)\r\n            for(let key of keys){\r\n              console.log(fields[key])\r\n              fields[key].resolve = async function (\r\n                source,\r\n                args,\r\n                context,\r\n                info\r\n              ) {\r\n                const isValid = await resolve.call(this, source, args, context, info)\r\n                console.log(`isValid`, args, isValid)\r\n                return 'reerer'\r\n                \r\n              } \r\n            }\r\n          \r\n          }\r\n        }\r\n      })\r\n\r\n      _useGraphql._graphQlExecutableSchema = executableSchema\r\n    }\r\n  } else {\r\n    const getIntrospectSchemaWithParams = getIntrospectSchema({\r\n      HttpLink,\r\n      fetch,\r\n      SubscriptionClient,\r\n      ws,\r\n      getMainDefinition,\r\n      split,\r\n      introspectSchema,\r\n      makeRemoteExecutableSchema\r\n    })\r\n    // if allowPartialRemoteSchema, catch all errors to allow partial schemas fetching\r\n    if (_useGraphql.allowPartialRemoteSchema) {\r\n      executableSchema = await Promise.map(_useGraphql._graphQlRemoteEndpoints, async (ep) => {\r\n        try {\r\n          return await getIntrospectSchemaWithParams(ep)\r\n        } catch (e) {\r\n          _useGraphql.logger.log(e)\r\n        }\r\n      }).filter((item) => item !== undefined)\r\n    } else {\r\n      // if allowPartialRemoteSchema is false, fire promise all, if something fails, all fails\r\n      executableSchema = await Promise.all(\r\n        _useGraphql._graphQlRemoteEndpoints.map((ep) => getIntrospectSchemaWithParams(ep))\r\n      )\r\n    }\r\n    // merge remote schemas\r\n    executableSchema = mergeSchemas({ schemas: executableSchema })\r\n    _useGraphql._graphQlExecutableSchema = executableSchema\r\n  }\r\n  // create bliz router and add middleware and graphiql and graphql to it\r\n  const router = _Instance.createRouter('/').middleware(bodyParser.json())\r\n  if (_useGraphql.useGraphiql) {\r\n    const graphiqlRoute = _Instance.createPath(_useGraphql.graphiqlRoute).handler(\r\n      graphiqlExpress({\r\n        endpointURL: _useGraphql.graphqlRoute,\r\n        subscriptionsEndpoint: `ws://localhost:${args[0]}${_useGraphql.subscriptionsEndpoint}`\r\n      })\r\n    )\r\n    router.get(graphiqlRoute)\r\n  }\r\n  finalGraphQlOptionsObject.schema = executableSchema\r\n  const graphqlRoute = _Instance.createPath(_useGraphql.graphqlRoute).handler(\r\n    graphqlExpress((req) => {\r\n      // pass headers and body to context\r\n      Object.assign(finalGraphQlOptionsObject.context, { headers: req.headers, body: req.body })\r\n      return finalGraphQlOptionsObject\r\n    })\r\n  )\r\n  router.get(graphqlRoute).post(graphqlRoute)\r\n  _Instance.registerRouters(router)\r\n  _Instance.events.emit('log')\r\n  // same as http server, only add a subscription server for graphql subscriptions\r\n  if (args.length > 1) {\r\n    const server = server.listen.apply(server, args)\r\n    SubscriptionServer.create(\r\n      {\r\n        execute,\r\n        subscribe,\r\n        schema: _useGraphql._graphQlExecutableSchema\r\n      },\r\n      {\r\n        server: server,\r\n        path: _useGraphql.subscriptionsEndpoint\r\n      }\r\n    )\r\n    return server\r\n  } else {\r\n    server.listen.apply(server, [\r\n      args[0],\r\n      () =>\r\n        print([\r\n          `Listening on Bliz server ${_version} on port ${args[0]}`,\r\n          `Platform: ${os.platform()}`,\r\n          `Hostname: ${os.hostname()}`,\r\n          `Architecture: ${os.arch()}`,\r\n          `CPU Cores: ${os.cpus().length}`,\r\n          `Memory Free: ${(\r\n            os.freemem() /\r\n            1024 /\r\n            1024 /\r\n            (os.totalmem() / 1024 / 1024) *\r\n            100\r\n          ).toFixed(0)}%, ${(os.freemem() / 1024 / 1024).toFixed(0)} MB / ${(\r\n            os.totalmem() /\r\n            1024 /\r\n            1024\r\n          ).toFixed(0)} MB`\r\n        ])\r\n    ])\r\n    SubscriptionServer.create(\r\n      {\r\n        execute,\r\n        subscribe,\r\n        schema: _useGraphql._graphQlExecutableSchema\r\n      },\r\n      {\r\n        server: server,\r\n        path: _useGraphql.subscriptionsEndpoint\r\n      }\r\n    )\r\n    return server\r\n  }\r\n}\r\n","import { AssignHandler, GetObjProps } from '../objectFactories'\r\n\r\n// graphql schema creator\r\nconst GraphQlSchemaCreator = (type) => {\r\n  const _graphql = {}\r\n  const _pathData = {\r\n    type,\r\n    resolver: {},\r\n    mutation: ``,\r\n    subscription: ``,\r\n    mockSchema: null,\r\n    query: ``\r\n  }\r\n  return Object.assign(\r\n    _graphql,\r\n    AssignHandler({\r\n      name: 'resolver',\r\n      obj: _pathData.resolver,\r\n      chainLink: _graphql,\r\n      override: true\r\n    }),\r\n    AssignHandler({ name: 'mockSchema', obj: _pathData, chainLink: _graphql }),\r\n    AssignHandler({ name: 'mutation', obj: _pathData, chainLink: _graphql }),\r\n    AssignHandler({ name: 'subscription', obj: _pathData, chainLink: _graphql }),\r\n    AssignHandler({ name: 'query', obj: _pathData, chainLink: _graphql }),\r\n    GetObjProps(_pathData)\r\n  )\r\n}\r\n\r\nexport default GraphQlSchemaCreator\r\n","// default error handler handler\r\nimport { StructError } from '../main'\r\n\r\n// default handler for http\r\n// if error passed from handler fire it\r\n// else if got here -> 404\r\nconst defaultErrorHandler = (req, res, err) => {\r\n  if (err) {\r\n    res.statusCode = err.status || 500\r\n    if (err instanceof StructError) {\r\n      res.json({\r\n        error: err.message,\r\n        path: err.path,\r\n        dataPassed: err.data,\r\n        valueReceived: err.value,\r\n        typeExpected: err.type\r\n      })\r\n    } else {\r\n      console.error(err)\r\n      res.json({ error: err.message })\r\n    }\r\n  } else {\r\n    res.statusCode = 404\r\n    res.json({ error: `${req.method.toUpperCase()} - ${req.url} not found...` })\r\n  }\r\n}\r\nexport default defaultErrorHandler\r\n","// main function\r\nfunction createHandler({\r\n  request,\r\n  response,\r\n  defaultHandler,\r\n  midHandler,\r\n  urlUtil,\r\n  handleNestedRoutersUtil,\r\n  populateParamsUtil,\r\n  populateQueryUtil,\r\n  populateUrlOptions,\r\n  _middleWares,\r\n  _routersObject,\r\n  _injected,\r\n  _Instance,\r\n  Promise\r\n}) {\r\n  // receive all middlewares from routers and apps if exist and concatanate them\r\n  _middleWares = _middleWares.reduce((prev, curr) => prev.concat(curr), [])\r\n  // handler to be passed to http.createServer\r\n  async function handler(req, res, next) {\r\n    // set proto of req and res to point to our req and res\r\n    req.__proto__ = request\r\n    res.__proto__ = response\r\n    // expose request and response to each other\r\n    response.req = req\r\n    request.res = res\r\n    if (!req.params) req.params = {}\r\n    if (!req.query) req.query = {}\r\n    // get url parts\r\n    let { method, splitRest } = urlUtil(req.url, req.method)\r\n    // check all url combinations possible\r\n    const urlCombinationOptions = populateUrlOptions(splitRest)\r\n    // get all middlewares collected on routers\r\n    const { baseOfRequest, rest, combinedRoutersMids } = handleNestedRoutersUtil(\r\n      urlCombinationOptions,\r\n      _routersObject\r\n    )\r\n    // populate req.query and return the final url to check on routers object\r\n    const finalRest = populateQueryUtil(req, rest) || rest\r\n    // populate req.params and return bool if need to skip param check or not\r\n    const { param, canSkipBecauseParams } = populateParamsUtil(\r\n      req,\r\n      _routersObject,\r\n      baseOfRequest,\r\n      method,\r\n      finalRest\r\n    )\r\n    // global middleware, if exists work with it, if throws error go to global handler\r\n    // check routers middleware\r\n    try {\r\n      // if global middlewares exists, execute them\r\n      if (_middleWares) {\r\n        await midHandler(Promise, req, res, _middleWares)\r\n      }\r\n      // if routers middlewares exist, execute them\r\n      if (combinedRoutersMids) {\r\n        await midHandler(Promise, req, res, combinedRoutersMids)\r\n      }\r\n    } catch (middleWareError) {\r\n      // in case of error in middlewares call defualt handler\r\n      return defaultHandler(req, res, middleWareError)\r\n    }\r\n    // something is not defined go to default handler\r\n    if (!canSkipBecauseParams) {\r\n      if (!_routersObject[baseOfRequest]) return defaultHandler(req, res)\r\n      if (!_routersObject[baseOfRequest][method]) return defaultHandler(req, res)\r\n      if (!_routersObject[baseOfRequest][method][finalRest]) return defaultHandler(req, res)\r\n    }\r\n    // current route after all checks\r\n    const currentRoute = _routersObject[baseOfRequest][method][\r\n      !canSkipBecauseParams ? finalRest : param\r\n    ].getObjProps()\r\n    // try router middleware => route middleware=> route handler=> if err check route err handler=>\r\n    // if err in err handler or err handler not exists => router err handler => if not go to global handler\r\n    try {\r\n      const { middleWareArr, describe, handler } = currentRoute\r\n      // if route middleware, execute\r\n      if (middleWareArr && middleWareArr.length > 0) {\r\n        await midHandler(Promise, req, res, middleWareArr)\r\n      }\r\n      // if validation schemes exist, execute them\r\n      if (describe && describe.incoming && describe.incoming.length > 0) {\r\n        for (let i = 0; i < describe.incoming.length; i++) {\r\n          let searchIn = ''\r\n          if (describe.incoming[i].in === 'path') {\r\n            searchIn = 'params'\r\n          } else {\r\n            searchIn = describe.incoming[i].in\r\n          }\r\n          describe.incoming[i].schema(req[searchIn])\r\n        }\r\n      }\r\n      // call handler with req, res and injected object from app.inject\r\n      if (describe && describe.incoming && describe.incoming.length > 0) {\r\n        const statusObject = {}\r\n        for (let schema of describe.outgoing) {\r\n          statusObject[schema.status] = schema.schema\r\n        }\r\n        Object.assign(res, { schema: statusObject })\r\n      }\r\n\r\n      await handler(req, res, _injected)\r\n    } catch (errorFromHandler) {\r\n      // here, it is the same as with middlewares but backwards, try route err handler, next up try router err handler and finally try global middleware\r\n      try {\r\n        if (currentRoute.errHandler) {\r\n          currentRoute.errHandler(req, res, errorFromHandler)\r\n        } else if (_routersObject[baseOfRequest].routerErrorHandler) {\r\n          _routersObject[baseOfRequest].routerErrorHandler(req, res, errorFromHandler)\r\n        } else {\r\n          defaultHandler(req, res, errorFromHandler)\r\n        }\r\n      } catch (errorFromErrorHandlers) {\r\n        defaultHandler(req, res, errorFromErrorHandlers)\r\n      }\r\n    }\r\n  }\r\n  return { handler }\r\n}\r\n\r\nexport default createHandler\r\n","import { struct } from 'superstruct'\r\nimport { assign } from '../utils'\r\n\r\nconst contactStruct = struct({\r\n  name: 'string?',\r\n  email: 'string?',\r\n  url: 'string?'\r\n})\r\n\r\nconst licenseStruct = struct({\r\n  name: 'string?',\r\n  url: 'string?'\r\n})\r\n\r\nconst serverStruct = struct({\r\n  url: 'string?',\r\n  description: 'string?'\r\n})\r\n\r\nconst infoStruct = struct({\r\n  title: 'string',\r\n  version: 'string',\r\n  description: 'string?',\r\n  termsOfService: 'string?',\r\n  contact: contactStruct,\r\n  license: licenseStruct\r\n})\r\n\r\nconst mainDescribeStruct = struct({\r\n  openapi: 'string',\r\n  security: 'array?',\r\n  info: infoStruct,\r\n  servers: [serverStruct]\r\n})\r\n\r\n// mainDescribe block\r\nconst mainDescribe = ({\r\n  title,\r\n  version,\r\n  description,\r\n  termsOfService,\r\n  contact,\r\n  license,\r\n  servers,\r\n  security\r\n}) => {\r\n  const validJson = {\r\n    openapi: '3.0.0',\r\n    security,\r\n    info: {\r\n      title,\r\n      version,\r\n      description,\r\n      termsOfService,\r\n      contact,\r\n      license\r\n    },\r\n    servers\r\n  }\r\n  return mainDescribeStruct(validJson)\r\n}\r\n\r\nconst singlePathMetaData = struct({\r\n  tags: ['string'],\r\n  description: 'string',\r\n  parameters: 'array?',\r\n  requestBody: 'object?',\r\n  summary: 'string?',\r\n  responses: 'object?'\r\n})\r\n\r\nconst methodStruct = (methodName) =>\r\n  struct({\r\n    [methodName === 'del' ? 'delete' : methodName]: singlePathMetaData\r\n  })\r\n\r\nconst pathStruct = (pathName, methodName) =>\r\n  struct({\r\n    [pathName]: methodStruct(methodName)\r\n  })\r\n\r\n// recurse on structs and populate object according to struct received\r\nconst getNested = (struct, map = {}) => {\r\n  const schema = (struct.schema && struct.schema.schema) || struct.schema\r\n  const keys = Object.keys(schema)\r\n  for (let key of keys) {\r\n    // console.log(key, schema[key])\r\n    if (schema[key].kind && schema[key].kind === 'object') {\r\n      const result = getNested(schema[key], {})\r\n      assign(map, [key, 'type'], 'object')\r\n      assign(map, [key, 'properties'], result)\r\n      // assign(map, [key], result)\r\n    } else if (schema[key].kind && schema[key].kind === 'list') {\r\n      // console.log(`schema[key]`, schema[key].type)\r\n      assign(map, [key, 'type'], 'array')\r\n      let type = schema[key].type.replace(/\\[|\\]/g, '')\r\n      assign(map, [key, 'items', 'type'], type.replace('?', ''))\r\n    } else if (schema[key].kind && schema[key].kind === 'enum') {\r\n      assign(map, [key, 'type'], 'string')\r\n      assign(\r\n        map,\r\n        [key, 'enum'],\r\n        schema[key].type.split('|').map((item) => item.replace(/\\\"/g, '').replace(/\\s/g, ''))\r\n      )\r\n    } else if (schema[key].kind && schema[key].kind === 'scalar') {\r\n      assign(map, [key], schema[key].type)\r\n    } else if (schema[key].kind && schema[key].kind === 'dict') {\r\n      assign(map, [key, 'type'], 'object')\r\n      const type = schema[key].type.replace(/dict\\<|\\>/g, '')\r\n      assign(map, [key, 'type'], type.substring(type.indexOf(',') + 1))\r\n    } else if (schema[key].kind && schema[key].kind === 'function') {\r\n    } else if (schema[key].kind && schema[key].kind === 'instance') {\r\n    } else if (schema[key].kind && schema[key].kind === 'interface') {\r\n    } else if (schema[key].kind && schema[key].kind === 'intersection') {\r\n      const types = schema[key].type\r\n        .split('&')\r\n        .map((item) => item.replace(/\\s/g, ''))\r\n        .map((item) => 'type: ' + item)\r\n      assign(map, [key, 'allOf'], types)\r\n    } else if (schema[key].kind && schema[key].kind === 'literal') {\r\n      // const types = schema[key].type.replace(/literal:|\\s/g, '')\r\n      // assign(map, [key, 'type'], types)\r\n    } else if (schema[key].kind && schema[key].kind === 'lazy') {\r\n    } else if (schema[key].kind && schema[key].kind === 'tuple') {\r\n    } else if (schema[key].kind && schema[key].kind === 'union') {\r\n      const types = schema[key].type\r\n        .split('|')\r\n        .map((item) => item.replace(/\\s/g, ''))\r\n        .map((item) => 'type: ' + item)\r\n      assign(map, [key, 'anyOf'], types)\r\n    } else {\r\n      // console.log(key, schema[key])\r\n      // console.log(`assigning type array`, key, schema[key])\r\n      assign(map, [key, 'type'], schema[key].replace('?', ''))\r\n      if (schema[key] === 'array') {\r\n        assign(map, [key, 'items', 'type'], 'object')\r\n      }\r\n    }\r\n  }\r\n  // console.log(`map:`, map)\r\n  return map\r\n}\r\n\r\n// add request schema based on path, method and request object\r\nconst addRequest = (request, path, method) => {\r\n  // console.log(`REQUEST: `, request)\r\n  if (!request) return\r\n  return {\r\n    content: {\r\n      [request.contentType || 'application/json']: {\r\n        schema: {\r\n          $ref: `#/components/schemas/${path\r\n            .replace(/\\//g, '')\r\n            .replace(/-/, '')\r\n            .replace(/[{|}]/g, '')}-body-${method}`\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// build response object\r\nconst responseBuilder = (responses, path, method) => {\r\n  const responseObject = {}\r\n  for (let resp of responses) {\r\n    responseObject[resp.status] = {\r\n      description: `${resp.status}`,\r\n      content: {\r\n        [resp.contentType || 'application/json']: {\r\n          schema: {\r\n            $ref: `#/components/schemas/${path\r\n              .replace(/\\//g, '')\r\n              .replace(/-/, '')\r\n              .replace(/[{|}]/g, '')}-${resp.status}-${method}`\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return responseObject\r\n}\r\n\r\n// describe path based on data received\r\nconst pathDescribe = ({\r\n  path,\r\n  method,\r\n  tags,\r\n  description,\r\n  summary,\r\n  incoming,\r\n  requestBody,\r\n  outgoing\r\n}) => {\r\n  // console.log(Object.keys(requests[0].schema.schema))\r\n  const myRegexp = /(:.+?)([\\/]|$)/g\r\n  const swaggerPath = path.replace(myRegexp, function(...args) {\r\n    return args[0].replace(args[1], `{${args[1].replace(':', '')}}`)\r\n  })\r\n  const bodyRequests = incoming.filter((request) => request.in === 'body')\r\n  const parametersRequests = incoming.filter((request) => ['path', 'query'].includes(request.in))\r\n  const injectedPathWithParams = pathStruct(swaggerPath, method)\r\n  const parametersToInject = parametersRequests\r\n    .map((request) => {\r\n      // const all\r\n      const arrayToConcat = []\r\n      const map = getNested(request, {})\r\n      const keys = Object.keys(map)\r\n      for (let key of keys) {\r\n        const obj = {}\r\n        obj.name = key\r\n        obj.in = request.in\r\n        obj.required = !map[key]['type'].includes('?')\r\n        obj.schema = {}\r\n        obj.schema.type = map[key]['type'].replace('?', '')\r\n        arrayToConcat.push(obj)\r\n      }\r\n      return arrayToConcat\r\n      // console.log(objectToReturn)\r\n    })\r\n    .reduce((prev, curr) => prev.concat(curr), [])\r\n\r\n  const jsonWithParams = {\r\n    [swaggerPath]: {\r\n      [method === 'del' ? 'delete' : method]: {\r\n        tags,\r\n        description,\r\n        summary,\r\n        requestBody: addRequest(bodyRequests[0], swaggerPath, method),\r\n        parameters: parametersToInject.length > 0 ? parametersToInject : undefined,\r\n        responses: responseBuilder(outgoing, swaggerPath, method)\r\n      }\r\n    }\r\n  }\r\n  return injectedPathWithParams(jsonWithParams)\r\n}\r\n\r\n// schema builder according to describe.requests object and describe.responses\r\nconst schemas = (schemas, securitySchemes) => {\r\n  const schemasObject = {}\r\n  for (let sc of schemas) {\r\n    const data = getNested(sc)\r\n    schemasObject[sc.name] = data[Object.keys(data)[0]]\r\n  }\r\n  return {\r\n    components: {\r\n      securitySchemes,\r\n      schemas: schemasObject\r\n    }\r\n  }\r\n}\r\nexport { pathDescribe, schemas, mainDescribe }\r\n","import { AssignHandler, GetObjProps, CreateObjectArray } from '../objectFactories'\r\n\r\nimport { checkBaseUtil } from '../utils'\r\n\r\n// path creator\r\nconst PathCreator = (path) => {\r\n  const _PathReturn = {}\r\n  const _pathData = {\r\n    middleWareArr: [],\r\n    path: checkBaseUtil(path),\r\n    describe: {},\r\n    handler: null,\r\n    errHandler: null,\r\n    parent: null\r\n  }\r\n  return Object.assign(\r\n    _PathReturn,\r\n    AssignHandler({\r\n      name: 'describe',\r\n      obj: _pathData.describe,\r\n      chainLink: _PathReturn,\r\n      override: true\r\n    }),\r\n    AssignHandler({\r\n      name: 'parent',\r\n      obj: _pathData.parent,\r\n      chainLink: _PathReturn,\r\n      override: true\r\n    }),\r\n    CreateObjectArray({ name: 'middleware', arr: _pathData.middleWareArr, chainLink: _PathReturn }),\r\n    AssignHandler({ name: 'handler', obj: _pathData, chainLink: _PathReturn }),\r\n    AssignHandler({ name: 'errHandler', obj: _pathData, chainLink: _PathReturn }),\r\n    GetObjProps(_pathData)\r\n  )\r\n}\r\n\r\nexport default PathCreator\r\n","import http from 'http'\r\n\r\nconst req = Object.create(http.IncomingMessage.prototype)\r\n\r\nexport default req\r\n","import http from 'http'\r\nimport etag from 'etag'\r\n\r\nconst res = Object.create(http.ServerResponse.prototype)\r\n\r\nres.status = function(status) {\r\n  this.statusCode = status\r\n  return this\r\n}\r\n\r\nres.json = function(data) {\r\n  // console.log(this.req.headers)\r\n  this.setHeader('Content-Type', 'application/json')\r\n  this.setHeader('X-Powered-By', 'Bliz')\r\n  const stringified = JSON.stringify(data, null, 3)\r\n  const generatedEtag = etag(stringified)\r\n  // console.log(generatedEtag, this.req.headers.etag)\r\n  this.setHeader('ETag', generatedEtag)\r\n  this.end(stringified)\r\n}\r\n\r\n// res.vjson = function(data){\r\n//   console.log(this, data, this.statusCode)\r\n//   if(this.schema[this.statusCode]){\r\n//     this.schema[this.statusCode](data)\r\n//   }else {\r\n//     console.warn('no matching schema for status ' + this.statusCode)\r\n//     this.json(data)\r\n//   }\r\n// }\r\n\r\nexport default res\r\n","import {\r\n  CreateArray,\r\n  CreateObjectArray,\r\n  AssignHandler,\r\n  GetObjProps,\r\n  Method\r\n} from '../objectFactories'\r\nimport { checkBaseUtil } from '../utils'\r\n\r\n// router creator\r\nconst RouterCreator = (base) => {\r\n  const _RouterReturn = {}\r\n  const _routerData = {\r\n    base: checkBaseUtil(base),\r\n    get: {},\r\n    post: {},\r\n    put: {},\r\n    del: {},\r\n    middleWareArr: [],\r\n    subRouters: [],\r\n    routerErrorHandler: null\r\n  }\r\n  return Object.assign(\r\n    _RouterReturn,\r\n    Method('get', _routerData, _RouterReturn),\r\n    Method('post', _routerData, _RouterReturn),\r\n    Method('put', _routerData, _RouterReturn),\r\n    Method('del', _routerData, _RouterReturn),\r\n    AssignHandler({ name: 'routerErrorHandler', obj: _routerData, chainLink: _RouterReturn }),\r\n    CreateObjectArray({\r\n      name: 'middleware',\r\n      arr: _routerData.middleWareArr,\r\n      chainLink: _RouterReturn\r\n    }),\r\n    CreateArray({ name: 'subRouter', obj: _routerData.subRouters, chainLink: _RouterReturn }),\r\n    GetObjProps(_routerData)\r\n  )\r\n}\r\n\r\nexport default RouterCreator\r\n","// package json\r\nimport 'babel-polyfill'\r\nimport packgeJson from '../package.json'\r\n\r\n// http dependencies\r\nimport RouterCreator from './http/router'\r\nimport PathCreator from './http/path'\r\nimport defaultHandler from './http/defaultHandler'\r\nimport CreateHandler from './http/handler'\r\nimport request from './http/request'\r\nimport response from './http/response'\r\nimport midHandler, { socketMiddlewareHandler } from './middlewareHandler'\r\nimport SocketRouterCreator from './sockets/socketRouter'\r\nimport SocketListenerCreator from './sockets/socketListener'\r\nimport socketHandler from './sockets/socketHandler'\r\n\r\n// graphql dependencies\r\nimport GraphQlCreator from './graphql/graphQlSchema'\r\nimport graphqlHandler from './graphql/graphQlHandler'\r\nimport { GraphQLScalarType, GraphQLNonNull, defaultFieldResolver, GraphQLString } from 'graphql'\r\nimport { graphqlExpress, graphiqlExpress } from './apolloServer/main'\r\nimport {\r\n  makeExecutableSchema,\r\n  mergeSchemas,\r\n  makeRemoteExecutableSchema,\r\n  introspectSchema,\r\n  SchemaDirectiveVisitor\r\n} from 'graphql-tools'\r\nimport { getIntrospectSchema } from './utils'\r\nimport ws from 'ws'\r\nimport { split } from 'apollo-client-preset'\r\nimport { getMainDefinition } from 'apollo-utilities'\r\nimport { SubscriptionServer, SubscriptionClient } from 'subscriptions-transport-ws'\r\nimport { execute, subscribe } from 'graphql'\r\nimport { PubSub } from 'graphql-subscriptions'\r\nimport fetch from 'node-fetch'\r\nimport { createHttpLink, HttpLink } from 'apollo-link-http'\r\n\r\n// app dependencies\r\nimport * as factories from './objectFactories'\r\nimport * as utils from './utils'\r\nimport RegisterRouters from './registerRouters'\r\nimport { pathDescribe, mainDescribe, schemas } from './http/openApi'\r\nimport bodyParser from 'body-parser'\r\nimport http from 'http'\r\nimport fs from 'fs'\r\nimport treeify from 'treeify'\r\nimport { struct, superstruct, StructError } from 'superstruct'\r\nimport EventEmitter from 'eventemitter2'\r\nimport Promise from 'bluebird'\r\nimport { stringify } from 'json-to-pretty-yaml'\r\nimport print from 'print-message'\r\nimport os from 'os'\r\nimport io from 'socket.io'\r\n\r\nconst httpDependencies = {\r\n  RouterCreator,\r\n  PathCreator,\r\n  defaultHandler,\r\n  CreateHandler,\r\n  request,\r\n  response,\r\n  midHandler,\r\n  pathDescribe,\r\n  mainDescribe,\r\n  schemas\r\n}\r\n\r\nconst graphqlDependencies = {\r\n  GraphQlCreator,\r\n  graphqlExpress,\r\n  graphiqlExpress,\r\n  graphqlHandler,\r\n  SubscriptionServer,\r\n  execute,\r\n  subscribe,\r\n  PubSub,\r\n  mergeSchemas,\r\n  makeRemoteExecutableSchema,\r\n  getIntrospectSchema,\r\n  fetch,\r\n  introspectSchema,\r\n  createHttpLink,\r\n  HttpLink,\r\n  SubscriptionClient,\r\n  ws,\r\n  getMainDefinition,\r\n  split,\r\n  SchemaDirectiveVisitor,\r\n  GraphQLScalarType, \r\n  GraphQLNonNull,\r\n  defaultFieldResolver,\r\n  GraphQLString\r\n}\r\n\r\nconst socketDependencies = {\r\n  SocketListenerCreator,\r\n  SocketRouterCreator,\r\n  socketMiddlewareHandler,\r\n  socketHandler\r\n}\r\n\r\nconst superStructObject = {\r\n  struct,\r\n  superstruct,\r\n  StructError\r\n}\r\n\r\nconst appDependencies = {\r\n  bodyParser,\r\n  http,\r\n  io,\r\n  makeExecutableSchema,\r\n  fs,\r\n  treeify,\r\n  EventEmitter,\r\n  Promise,\r\n  stringify,\r\n  print,\r\n  os,\r\n  packgeJson,\r\n  RegisterRouters\r\n}\r\n\r\n// combining all dependencies to one object for convenience.\r\nconst BlizAppParams = {\r\n  ...utils,\r\n  ...factories,\r\n  ...httpDependencies,\r\n  ...graphqlDependencies,\r\n  ...socketDependencies,\r\n  ...appDependencies,\r\n  superStructObject\r\n}\r\n\r\n// main instance creator, returns an instance of bliz app\r\n// using concatanative inheritance + RORO (receive object return object)\r\nconst BlizApp = (BlizAppParams) => {\r\n  // internal information\r\n  // _Instance - all instance data\r\n  // _injected - all data passed, will be injected to all handlers\r\n  // _options - options object, still did not implement anything for it\r\n  // _loggerEntity - holds the structure of sockets and http routes when calling pretty print\r\n  const _internal = {\r\n    _version: BlizAppParams.packgeJson.version,\r\n    _Instance: {},\r\n    _injected: {},\r\n    _options: {},\r\n    _loggerEntity: { sockets: {}, http: {} }\r\n  }\r\n  // socekt.io object, _socketSubApps was not yet implemented\r\n  const _useSockets = {\r\n    useSockets: false,\r\n    delimiter: ':',\r\n    _socketRoutersObject: {},\r\n    _socketMiddlewares: [],\r\n    _socketSubApps: []\r\n  }\r\n  // graphql config object\r\n  const _useGraphql = {\r\n    useGraphql: false,\r\n    graphqlRoute: '/graphql',\r\n    graphiqlRoute: '/graphiql',\r\n    _graphQlRemoteEndpoints: [],\r\n    _graphQlExecutableSchema: null,\r\n    _graphQlSchemas: {},\r\n    _graphQlDirectives: [],\r\n    _graphQlEnums: [],\r\n    subscriptionsEndpoint: '/subscriptions',\r\n    useGraphiql: true,\r\n    logger: { log: (e) => console.log(`Error from graphql: `, e) },\r\n    directiveResolvers: {},\r\n    tracing: true,\r\n    cacheControl: {\r\n      defaultMaxAge: 5\r\n    }\r\n  }\r\n  // http object, _describe is added by each component as .describe, used for swagger.yaml generation\r\n  const _useHttp = {\r\n    useSwagger: false,\r\n    _middleWares: [],\r\n    _routersObject: {},\r\n    _describe: {},\r\n    _subApps: []\r\n  }\r\n\r\n  // entire app data, used when calling getObjProps() on app\r\n  const _appData = {\r\n    _useSockets,\r\n    _useGraphql,\r\n    _useHttp\r\n  }\r\n\r\n  // binding all data and dependencies to the http handler\r\n  const _createHandler = CreateHandler.bind(this, { ...BlizAppParams, ..._useHttp })\r\n  // destructuring for passing to allow chaining on methods\r\n  const { _Instance, _options, _injected, _loggerEntity, _version } = _internal\r\n\r\n  // call all function and pass dependencies to them and compose methods, put all on the Instance object\r\n  return Object.assign(\r\n    _Instance,\r\n    BlizAppParams.CreateNewObjOf({ name: 'GraphQlSchema', obj: GraphQlCreator }),\r\n    BlizAppParams.CreateNewObjOf({\r\n      name: 'SocketRouter',\r\n      obj: SocketRouterCreator,\r\n      dependencies: { ...BlizAppParams }\r\n    }),\r\n    BlizAppParams.CreateNewObjOf({\r\n      name: 'SocketListener',\r\n      obj: SocketListenerCreator,\r\n      dependencies: { ...BlizAppParams }\r\n    }),\r\n    BlizAppParams.CreateNewObjOf({\r\n      name: 'Router',\r\n      obj: RouterCreator,\r\n      dependencies: { ...BlizAppParams }\r\n    }),\r\n    BlizAppParams.CreateNewObjOf({\r\n      name: 'Path',\r\n      obj: PathCreator,\r\n      dependencies: { ...BlizAppParams }\r\n    }),\r\n    BlizAppParams.AssignHandler({\r\n      name: 'sockets',\r\n      obj: _useSockets,\r\n      chainLink: _Instance,\r\n      override: true\r\n    }),\r\n    BlizAppParams.AssignHandler({\r\n      name: 'graphql',\r\n      obj: _useGraphql,\r\n      chainLink: _Instance,\r\n      override: true\r\n    }),\r\n    BlizAppParams.AssignHandler({\r\n      name: 'describe',\r\n      obj: _useHttp._describe,\r\n      chainLink: _Instance,\r\n      override: true\r\n    }),\r\n    BlizAppParams.AssignHandler({\r\n      name: 'options',\r\n      obj: _options,\r\n      chainLink: _Instance,\r\n      override: true\r\n    }),\r\n    BlizAppParams.AssignHandler({\r\n      name: 'inject',\r\n      obj: _injected,\r\n      chainLink: _Instance,\r\n      override: true\r\n    }),\r\n    BlizAppParams.CreateObjectArray({\r\n      name: 'middleware',\r\n      arr: _useHttp._middleWares,\r\n      chainLink: _Instance\r\n    }),\r\n    BlizAppParams.CreateObjectArray({\r\n      name: 'socketMiddleware',\r\n      arr: _useSockets._socketMiddlewares,\r\n      chainLink: _Instance\r\n    }),\r\n    BlizAppParams.CreateArray({ name: 'subApp', arr: _useHttp._subApps, chainLink: _Instance }),\r\n    BlizAppParams.CreateArray({\r\n      name: 'enum',\r\n      arr: _useGraphql._graphQlEnums,\r\n      chainLink: _Instance\r\n    }),\r\n    BlizAppParams.CreateArray({\r\n      name: 'directive',\r\n      arr: _useGraphql._graphQlDirectives,\r\n      chainLink: _Instance\r\n    }),\r\n    BlizAppParams.CreateSwagger({ ..._appData, ...BlizAppParams, _Instance }),\r\n    BlizAppParams.PrettyPrint({ ..._appData, ...BlizAppParams, _Instance, _loggerEntity }),\r\n    BlizAppParams.RegisterRouters({ ..._appData, ...BlizAppParams, _Instance }),\r\n    BlizAppParams.EventsCreator(BlizAppParams.EventEmitter),\r\n    BlizAppParams.GetObjProps(_appData),\r\n    BlizAppParams.Listen({\r\n      _createHandler,\r\n      ..._appData,\r\n      ...BlizAppParams,\r\n      _Instance,\r\n      _version,\r\n      _injected\r\n    })\r\n  )\r\n}\r\n\r\n// exposed factory to create a new instance\r\nconst BlizCreator = () => {\r\n  return Object.assign({}, BlizApp(BlizAppParams))\r\n}\r\n\r\n// expose factory and superstruct for validation, request + response for extending http req and res\r\nexport default BlizCreator\r\nexport { request, response, struct, superstruct, StructError, SchemaDirectiveVisitor }\r\n","// next function that resolves if called next(), if next is called with args it rejects, like in express\r\nfunction next(resolve, reject, ...args) {\r\n  if (args.length > 0) return reject(args[0])\r\n  return resolve()\r\n}\r\n\r\n// race the timeout promise with the promise provided, used to timeout the middlewares\r\nconst promiseTimeout = (promise, ms, throwError) => {\r\n  // Create a promise that rejects in <ms> milliseconds\r\n  let timeout = new Promise((resolve, reject) => {\r\n    let id = setTimeout(() => {\r\n      clearTimeout(id)\r\n      const err = new Error('Timed out in ' + ms + 'ms.')\r\n      throwError ? reject(err) : resolve('Timed out in ' + ms + 'ms.')\r\n    }, ms)\r\n  })\r\n\r\n  // Returns a race between our timeout and the passed in promise\r\n  return Promise.race([promise, timeout])\r\n}\r\n\r\n// handler for express middlewares with next...\r\nasync function midHandler(Promise, req, res, arr) {\r\n  for (let item of arr) {\r\n    const { fn, timeout, throwError } = item\r\n    const handlerPromise = new Promise((resolve, reject) =>\r\n      fn(req, res, next.bind(this, resolve, reject))\r\n    )\r\n    const data = await promiseTimeout(handlerPromise, timeout, throwError)\r\n  }\r\n}\r\n\r\n// handler for socket middlewares with next\r\nasync function socketMiddlewareHandler(Promise, io, socket, msg, cb, arr) {\r\n  // run on middleware array and wait for each sequentially\r\n  for (let item of arr) {\r\n    const { fn, timeout, throwError } = item\r\n    const handlerPromise = new Promise((resolve, reject) =>\r\n      fn(io, socket, msg, cb, next.bind(this, resolve, reject))\r\n    )\r\n    await promiseTimeout(handlerPromise, timeout, throwError)\r\n  }\r\n}\r\n\r\nexport { socketMiddlewareHandler }\r\nexport default midHandler\r\n","// receive an http and a handler and return a listen func\r\nconst Listen = (dependencies) => ({\r\n  createServer: (...args) => {\r\n    const {\r\n      http: { createServer },\r\n      _createHandler\r\n    } = dependencies\r\n    const { handler } = _createHandler()\r\n    const server = createServer(handler)\r\n    return server\r\n  },\r\n  // listen function that starts the app\r\n  // if sockets -> use socket handler\r\n  // else if graphql -> use graphql handler\r\n  // else -> use http handler\r\n  // on each handler fire log event, used to notify log listener to log after all routes and middlewares have been processed and app is ready.\r\n  listen: (...args) => {\r\n    const {\r\n      http: { createServer },\r\n      io,\r\n      socketHandler,\r\n      graphqlHandler,\r\n      _createHandler,\r\n      _useSockets,\r\n      _version,\r\n      _useGraphql,\r\n      _Instance,\r\n      print,\r\n      os\r\n    } = dependencies\r\n    const { handler } = _createHandler()\r\n    const server = createServer(handler)\r\n    if (_useSockets.useSockets) {\r\n      _useSockets.io = io\r\n      return socketHandler({ server, args, ...dependencies })\r\n    } else if (_useGraphql.useGraphql) {\r\n      return graphqlHandler({ server, args, ...dependencies })\r\n    } else {\r\n      _Instance.events.emit('log')\r\n      if (args.length > 1) {\r\n        return server.listen.apply(server, args)\r\n      } else {\r\n        // print os information and Bliz information\r\n        return server.listen.apply(server, [\r\n          args[0],\r\n          () =>\r\n            print([\r\n              `Listening on Bliz server ${_version} on port ${args[0]}`,\r\n              `Platform: ${os.platform()}`,\r\n              `Hostname: ${os.hostname()}`,\r\n              `Architecture: ${os.arch()}`,\r\n              `CPU Cores: ${os.cpus().length}`,\r\n              `Memory Free: ${(os.freemem() / os.totalmem() * 100).toFixed(0)}%, ${(\r\n                os.freemem() /\r\n                1024 /\r\n                1024\r\n              ).toFixed(0)} MB / ${(os.totalmem() / 1024 / 1024).toFixed(0)} MB`\r\n            ])\r\n        ])\r\n      }\r\n    }\r\n  }\r\n})\r\n\r\n// TODO: implement cluster support on sockets\r\nconst Cluster = ({ _version }) => ({\r\n  // stage 1\r\n  // get options\r\n  // get routers, schemas\r\n  // open redis client\r\n  // ask redis for bliz cluster version\r\n  // if same version - continue\r\n  // else - different versions between cluster servers, throw error (update server)\r\n  // stage 2\r\n  // create server hash\r\n  // write hash to redis\r\n  // stage 3\r\n  // open redis subscriber for divide work\r\n  // open redis subscriber for receive work\r\n  // stage 4\r\n  // when query comes, round robin or options to choose random server (subscribers / hash ??)\r\n  // fire divide work event to chosen server\r\n  // if chosen master\r\n  // divide work totalSchemas / registered servers on cluster\r\n})\r\n\r\n// pretty print all app routes\r\nconst PrettyPrint = ({\r\n  _useHttp,\r\n  _useSockets,\r\n  _Instance,\r\n  _loggerEntity,\r\n  populateObjectWithTreeUtil,\r\n  treeify\r\n}) => ({\r\n  prettyPrint: (logger = console.log) => {\r\n    _Instance.events.once('log', () =>\r\n      setImmediate(() => {\r\n        populateObjectWithTreeUtil(\r\n          _useHttp._routersObject,\r\n          ['get', 'post', 'put', 'del'],\r\n          _loggerEntity.http\r\n        )\r\n        populateObjectWithTreeUtil(\r\n          _useSockets._socketRoutersObject,\r\n          ['event'],\r\n          _loggerEntity.sockets,\r\n          _useSockets.delimiter\r\n        )\r\n        logger(treeify.asTree(_loggerEntity))\r\n      }, 0)\r\n    )\r\n    return _Instance\r\n  }\r\n})\r\n\r\n// method creator for router\r\nconst Method = (name, object, chainLink) => ({\r\n  [name]: (data) => {\r\n    object[name][data.getObjProps().path] = data\r\n    return chainLink\r\n  }\r\n})\r\n\r\n// create swagger yaml\r\n// run on all routers and describe blocks and assemble swagger.yaml\r\n// mainDescribe -> takes info from app.describe()\r\n// pathDescribe -> takes info from path.describe()\r\nconst CreateSwagger = ({\r\n  _useHttp,\r\n  _Instance,\r\n  stringify,\r\n  mainDescribe,\r\n  _describe,\r\n  pathDescribe,\r\n  schemas,\r\n  fs\r\n}) => ({\r\n  swagger: (swaggerOptions) => {\r\n    let yaml = ''\r\n    _useHttp.swagger = true\r\n    const { _routersObject, _describe } = _useHttp\r\n    yaml += stringify(mainDescribe(_describe))\r\n    const routersKeys = Object.keys(_routersObject)\r\n    const mainPathsObject = { paths: {} }\r\n    const schemasObject = []\r\n    for (let key of routersKeys) {\r\n      const options = ['get', 'post', 'put', 'del']\r\n      const router = _routersObject[key]\r\n      for (let method of options) {\r\n        const paths = Object.keys(router[method])\r\n        for (let path of paths) {\r\n          const fullPath = router.base + path\r\n          const describe = router[method][path].getObjProps().describe\r\n          const responseObjectsForSchema = describe.incoming.filter(\r\n            (request) => request.in === 'body'\r\n          )\r\n          if (responseObjectsForSchema.length > 0) {\r\n            responseObjectsForSchema.map((response) => {\r\n              const obj = {}\r\n              const name = `${fullPath\r\n                .replace(/\\//g, '')\r\n                .replace(/-/, '')\r\n                .replace(/[:]/g, '')}-body-${method}`\r\n              obj.name = name\r\n              // obj.department = 'requestBodies'\r\n              obj.schema = Object.assign({}, response.schema)\r\n              schemasObject.push(obj)\r\n            })\r\n          }\r\n          describe.outgoing.map((response) => {\r\n            const obj = {}\r\n            const name = `${fullPath\r\n              .replace(/\\//g, '')\r\n              .replace(/-/, '')\r\n              .replace(/[{:}]/g, '')}-${response.status}-${method}`\r\n            obj.name = name\r\n            // obj.department = 'responses'\r\n            obj.schema = Object.assign({}, response.schema)\r\n            schemasObject.push(obj)\r\n          })\r\n\r\n          const fullObj = Object.assign({}, describe, { method, path: fullPath })\r\n          Object.assign(mainPathsObject.paths, pathDescribe(fullObj))\r\n        }\r\n      }\r\n      yaml += stringify(mainPathsObject)\r\n      yaml += stringify(schemas(schemasObject))\r\n      // console.log(yaml)\r\n      // console.log(swaggerOptions)\r\n      if (swaggerOptions && swaggerOptions.absoluteFilePath) {\r\n        fs.writeFileSync(swaggerOptions.absoluteFilePath, yaml, 'utf8')\r\n      }\r\n    }\r\n    return _Instance\r\n  }\r\n})\r\n\r\n// assign creator\r\nconst AssignHandler = ({ name, obj, chainLink, override = false }) => ({\r\n  [name]: (data) => {\r\n    override ? Object.assign(obj, data) : (obj[name] = data)\r\n    // console.log(`DATA AFTER: `, object, name, data)\r\n    return chainLink\r\n  }\r\n})\r\n\r\n// list object properties\r\nconst GetObjProps = (obj) => ({\r\n  getObjProps: () => obj\r\n})\r\n\r\n// create event emmiter 2 instance (supports regexes)\r\nconst EventsCreator = (EventEmitter) => ({\r\n  events: new EventEmitter({ wildcard: true })\r\n})\r\n\r\n// when called, receives an object\r\n// returns new object\r\nconst CreateNewObjOf = ({ name, obj, dependencies = {} }) => ({\r\n  [`create${name}`]: (data) => {\r\n    return Object.assign({}, obj(data, ...dependencies))\r\n  }\r\n})\r\n\r\n// pushes data to array\r\nconst CreateArray = ({ name, arr, chainLink }) => ({\r\n  [name]: (data) => {\r\n    arr.push(data)\r\n    return chainLink\r\n  }\r\n})\r\n\r\n// pushes data to middleware array with default timeout of 5s and throwError set to true if timeout occures\r\nconst CreateObjectArray = ({ name, arr, chainLink }) => ({\r\n  [name]: (fn, timeout = 5000, throwError = true) => {\r\n    arr.push({ fn, timeout, throwError })\r\n    return chainLink\r\n  }\r\n})\r\n\r\nexport {\r\n  AssignHandler,\r\n  CreateArray,\r\n  CreateNewObjOf,\r\n  Method,\r\n  GetObjProps,\r\n  Listen,\r\n  PrettyPrint,\r\n  EventsCreator,\r\n  CreateSwagger,\r\n  CreateObjectArray\r\n}\r\n","// register routers func, returns 3 register routers methods, one for http, one for sockets and last one for graphql\r\nconst RegisterRouters = ({\r\n  _useGraphql,\r\n  _useHttp,\r\n  _injected,\r\n  _useSockets,\r\n  _Instance,\r\n  populateSubAppsUtil,\r\n  populateRoutersUtil,\r\n  populateSocketRoutersUtil\r\n}) => ({\r\n  registerRouters: (...routers) => {\r\n    // populate subApps object with sub apps passed\r\n    const { _middleWares, _routersObject, _subApps } = _useHttp\r\n    populateSubAppsUtil(_middleWares, _routersObject, _subApps)\r\n    // populate globalRoutesObject with routers passed\r\n    populateRoutersUtil(_routersObject, routers)\r\n    return _Instance\r\n  },\r\n  registerSocketRouters: (...routers) => {\r\n    // console.log(routers)\r\n    // TODO: add sub apps socket routers\r\n    const { _socketRoutersObject } = _useSockets\r\n    const { delimiter } = _useSockets\r\n    populateSocketRoutersUtil(_socketRoutersObject, routers, null, delimiter)\r\n    // console.log(_socketRoutersObject)\r\n    return _Instance\r\n  },\r\n  registerGraphQlSchemas: (...schemas) => {\r\n    // if remote endpoints set, do not allow local schemas to be registered\r\n    const { _graphQlRemoteEndpoints } = _useGraphql\r\n    if (_graphQlRemoteEndpoints.length > 0) {\r\n      throw new Error(\r\n        'you may only registerGraphQlSchemas or registerRemoteGraphQlSchemas, not either'\r\n      )\r\n    } else {\r\n      Object.assign(_useGraphql._graphQlSchemas, { schemas })\r\n    }\r\n    return _Instance\r\n  },\r\n  registerRemoteGraphQlSchemas: (...endpoints) => {\r\n    // if local endpoints set, do not allow remote schemas to be registered\r\n    if (Object.keys(_useGraphql._graphQlSchemas).length > 0) {\r\n      throw new Error(\r\n        'you may only registerGraphQlSchemas or registerRemoteGraphQlSchemas, not either'\r\n      )\r\n    } else {\r\n      _useGraphql._graphQlRemoteEndpoints = endpoints\r\n      // console.log(endpoints)\r\n    }\r\n    return _Instance\r\n  }\r\n})\r\nexport default RegisterRouters\r\n","// socket handler, called from listen when use sockets is set to true\r\nconst socketHandler = ({\r\n  _useSockets,\r\n  _Instance,\r\n  _injected,\r\n  server,\r\n  _version,\r\n  args,\r\n  os,\r\n  print,\r\n  socketMiddlewareHandler,\r\n  checkSubRouters\r\n}) => {\r\n  const injectedIo = _useSockets.io(server)\r\n  if (args.length > 1) {\r\n    server.listen.apply(server, args)\r\n  } else {\r\n    server.listen.apply(server, [\r\n      args[0],\r\n      () =>\r\n        print([\r\n          `Listening on Bliz server ${_version} on port ${args[0]}`,\r\n          `Platform: ${os.platform()}`,\r\n          `Hostname: ${os.hostname()}`,\r\n          `Architecture: ${os.arch()}`,\r\n          `CPU Cores: ${os.cpus().length}`,\r\n          `Memory Free: ${(\r\n            os.freemem() /\r\n            1024 /\r\n            1024 /\r\n            (os.totalmem() / 1024 / 1024) *\r\n            100\r\n          ).toFixed(0)}%, ${(os.freemem() / 1024 / 1024).toFixed(0)} MB / ${(\r\n            os.totalmem() /\r\n            1024 /\r\n            1024\r\n          ).toFixed(0)} MB`\r\n        ])\r\n    ])\r\n  }\r\n\r\n  // on connection add all routers and middlewares\r\n  injectedIo.on('connection', (socket) => {\r\n    const routersKeys = Object.keys(_useSockets._socketRoutersObject)\r\n    for (let key of routersKeys) {\r\n      const eventKeys = Object.keys(_useSockets._socketRoutersObject[key].event)\r\n      for (let eventKey of eventKeys) {\r\n        socket.on(`${key}${_useSockets.delimiter}${eventKey}`, async (msg, cb) => {\r\n          try {\r\n            const chosenEvent = _useSockets._socketRoutersObject[key].event[eventKey].getObjProps()\r\n            if (_useSockets._socketMiddlewares && _useSockets._socketMiddlewares.length > 0) {\r\n              await socketMiddlewareHandler(\r\n                Promise,\r\n                injectedIo,\r\n                socket,\r\n                msg,\r\n                cb,\r\n                _useSockets._socketMiddlewares\r\n              )\r\n            }\r\n            let combinedMiddlewareArray = []\r\n            key\r\n              .split(_useSockets.delimiter)\r\n              .map(\r\n                (prefix) =>\r\n                  _useSockets._socketRoutersObject[prefix]\r\n                    ? checkSubRouters(\r\n                        _useSockets._socketRoutersObject[prefix],\r\n                        combinedMiddlewareArray\r\n                      )\r\n                    : void 0\r\n              )\r\n\r\n            combinedMiddlewareArray = combinedMiddlewareArray.reduce((prev, curr) =>\r\n              prev.concat(curr)\r\n            )\r\n            if (combinedMiddlewareArray && combinedMiddlewareArray.length > 0) {\r\n              await socketMiddlewareHandler(\r\n                Promise,\r\n                injectedIo,\r\n                socket,\r\n                msg,\r\n                cb,\r\n                combinedMiddlewareArray\r\n              )\r\n            }\r\n            if (chosenEvent.middleWareArr && chosenEvent.middleWareArr.length > 0) {\r\n              await socketMiddlewareHandler(\r\n                Promise,\r\n                injectedIo,\r\n                socket,\r\n                msg,\r\n                cb,\r\n                chosenEvent.middleWareArr\r\n              )\r\n            }\r\n            await chosenEvent.handler(injectedIo, socket, msg, cb, _injected)\r\n          } catch (e) {\r\n            console.log(e)\r\n          }\r\n        })\r\n      }\r\n    }\r\n    socket.on('disconnect', () => {})\r\n  })\r\n  _Instance.events.emit('log')\r\n  return injectedIo\r\n}\r\n\r\nexport default socketHandler\r\n","import { CreateObjectArray, AssignHandler, GetObjProps } from '../objectFactories'\r\n\r\n// socket listener creator\r\nconst CreateSocketListener = (path) => {\r\n  const _PathReturn = {}\r\n  const pathData = {\r\n    middleWareArr: [],\r\n    path,\r\n    handler: null,\r\n    errHandler: null\r\n  }\r\n  return Object.assign(\r\n    _PathReturn,\r\n    CreateObjectArray({ name: 'middleware', arr: pathData.middleWareArr, chainLink: _PathReturn }),\r\n    AssignHandler({ name: 'handler', obj: pathData, chainLink: _PathReturn }),\r\n    AssignHandler({ name: 'errHandler', obj: pathData, chainLink: _PathReturn }),\r\n    GetObjProps(pathData)\r\n  )\r\n}\r\n\r\nexport default CreateSocketListener\r\n","import {\r\n  CreateObjectArray,\r\n  CreateArray,\r\n  AssignHandler,\r\n  GetObjProps,\r\n  Method\r\n} from '../objectFactories'\r\n\r\n// socket router creator\r\nconst SocketRouterCreator = (base) => {\r\n  const _RouterReturn = {}\r\n  const routerData = {\r\n    base,\r\n    event: {},\r\n    middleWareArr: [],\r\n    subRouters: [],\r\n    routerErrorHandler: null\r\n  }\r\n  return Object.assign(\r\n    _RouterReturn,\r\n    Method('event', routerData, _RouterReturn),\r\n    AssignHandler({ name: 'routerErrorHandler', obj: routerData, chainLink: _RouterReturn }),\r\n    CreateObjectArray({\r\n      name: 'middleware',\r\n      arr: routerData.middleWareArr,\r\n      chainLink: _RouterReturn\r\n    }),\r\n    CreateArray({ name: 'socketSubRouter', arr: routerData.subRouters, chainLink: _RouterReturn }),\r\n    GetObjProps(routerData)\r\n  )\r\n}\r\n\r\nexport default SocketRouterCreator\r\n","// check url, split by /, return split url and method to lower case\r\nconst urlUtil = (url, methodUpperCase) => {\r\n  const dividedUrl = url.split('/')\r\n  let method = methodUpperCase.toLowerCase()\r\n  if (method === 'delete') method = 'del'\r\n  let splitRest = dividedUrl.slice(1).map((each) => `/${each}`)\r\n  splitRest.unshift('/')\r\n  splitRest = checkBaseUtil(splitRest)\r\n  return {\r\n    method,\r\n    splitRest\r\n  }\r\n}\r\n\r\n// get remote schemas for schema stitching with graphql\r\nconst getIntrospectSchema = ({\r\n  HttpLink,\r\n  SubscriptionClient,\r\n  fetch,\r\n  ws,\r\n  getMainDefinition,\r\n  split,\r\n  introspectSchema,\r\n  makeRemoteExecutableSchema\r\n}) => async (remoteSchema) => {\r\n  const httpLink = new HttpLink({ uri: remoteSchema.url, fetch })\r\n  const wsLink = new SubscriptionClient(\r\n    remoteSchema.ws,\r\n    {\r\n      reconnect: true\r\n    },\r\n    ws\r\n  )\r\n\r\n  const link = split(\r\n    ({ query }) => {\r\n      const { kind, operation } = getMainDefinition(query)\r\n      return kind === 'OperationDefinition' && operation === 'subscription'\r\n    },\r\n    wsLink,\r\n    httpLink\r\n  )\r\n  const schema = await introspectSchema(httpLink)\r\n\r\n  const executableSchema = makeRemoteExecutableSchema({\r\n    schema,\r\n    link\r\n  })\r\n\r\n  return executableSchema\r\n}\r\n\r\n// used by pretty print to populate object with data received\r\nconst populateObjectWithTreeUtil = (entity, options, objectToAddTo, delimiter) => {\r\n  const keysOfEntity = Object.keys(entity)\r\n  for (let key of keysOfEntity) {\r\n    let obj = {}\r\n    for (let option of options) {\r\n      let routeValues = Object.keys(entity[key][option])\r\n      if (routeValues.length > 0) {\r\n        let routeKey = delimiter || option.toUpperCase()\r\n        let value = {}\r\n        for (let route of routeValues) {\r\n          value[route] = ''\r\n          const assignedOption = { [`${[routeKey]}`]: value }\r\n          Object.assign(obj, assignedOption)\r\n          objectToAddTo[key] = obj\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// recurse on routers object and populate obj passed\r\nconst populateSocketRoutersUtil = (obj, routers, parent = null, delimiter) => {\r\n  // console.log(`obj: `, obj, `routers: `, routers, `parent: `, parent)\r\n  const innerRouterObj = {}\r\n  routers.map((router) => {\r\n    let list = router.getObjProps()\r\n    innerRouterObj[parent ? `${parent}${delimiter}${list.base}` : list.base] = list\r\n    // console.log(`inner object`, innerRouterObj)\r\n    if (list.subRouters.length > 0) {\r\n      return populateSocketRoutersUtil(\r\n        obj,\r\n        list.subRouters,\r\n        parent ? (parent += ':' + list.base) : list.base,\r\n        delimiter\r\n      )\r\n    }\r\n  })\r\n  Object.assign(obj, innerRouterObj)\r\n}\r\n\r\n// recurse on routers object and populate obj passed\r\nconst populateRoutersUtil = (obj, routers, parent = null) => {\r\n  // console.log(obj, routers, parent)\r\n  const innerRouterObj = {}\r\n  routers.map((router) => {\r\n    let list = router.getObjProps()\r\n    innerRouterObj[parent ? `${parent}${list.base}`.replace('//', '/') : list.base] = list\r\n    if (list.subRouters.length > 0) {\r\n      return populateRoutersUtil(obj, list.subRouters, parent ? (parent += list.base) : list.base)\r\n    }\r\n  })\r\n  Object.assign(obj, innerRouterObj)\r\n}\r\n\r\n// recurse on sub apps, populate routers and middlewares\r\nconst populateSubAppsUtil = (mds, routes, subApps) => {\r\n  subApps.map((subApp) => {\r\n    const data = subApp.getObjProps()\r\n    const _middlewares = data._middleWares\r\n    const _routersObject = data._routersObject\r\n    Object.assign(routes, _routersObject)\r\n    mds.push(_middlewares)\r\n    const innerSubApps = data._subApps\r\n    if (innerSubApps.length > 0) {\r\n      return populateSubAppsUtil(mds, routes, innerSubApps)\r\n    }\r\n  })\r\n}\r\n\r\n// nested routers handle test\r\nconst populateUrlOptions = (arr) => {\r\n  let startStr = ''\r\n  return arr.map((urlPart) => {\r\n    startStr += urlPart\r\n    startStr = startStr.replace('//', '/')\r\n    return startStr\r\n  })\r\n}\r\n\r\n// run on split url receives and check each part of the url, if it is defined\r\nconst handleNestedRoutersUtil = (splitUrl, routesObject, combinedRoutersMids = []) => {\r\n  let baseOfRequest\r\n  let rest = null\r\n  let lastDefinedRoute = null\r\n  // check each url in routes obj\r\n  for (let url of splitUrl) {\r\n    // if exists, get middleware\r\n    if (routesObject[url]) {\r\n      lastDefinedRoute = url\r\n      combinedRoutersMids.push(routesObject[url].middleWareArr)\r\n    }\r\n  }\r\n  const indexOfLastRoute = splitUrl.indexOf(lastDefinedRoute)\r\n  baseOfRequest = lastDefinedRoute\r\n  if (baseOfRequest) {\r\n    if (indexOfLastRoute === splitUrl.length - 1) {\r\n      rest = '/'\r\n    } else {\r\n      rest = splitUrl[splitUrl.length - 1]\r\n      rest = rest.substr(baseOfRequest.length)\r\n    }\r\n    if (baseOfRequest === '/') {\r\n      rest = `/${rest}`\r\n    }\r\n    rest = rest.replace('//', '/')\r\n  } else {\r\n    baseOfRequest = '/'\r\n    rest = '/'\r\n  }\r\n  // console.log(`BASE:${baseOfRequest},REST:${rest},LASTURI:${lastDefinedRoute}`)\r\n  // console.log(rest)\r\n  combinedRoutersMids = combinedRoutersMids.reduce((prev, curr) => prev.concat(curr), [])\r\n  return {\r\n    baseOfRequest,\r\n    rest,\r\n    combinedRoutersMids\r\n  }\r\n}\r\n\r\n// populate req.query from url\r\nconst populateQueryUtil = (req, urlArray) => {\r\n  if (urlArray.includes('?')) {\r\n    urlArray\r\n      .substring(urlArray.indexOf('?') + 1)\r\n      .split('&')\r\n      .map((query) => {\r\n        const keyValue = query.split('=')\r\n        req.query[keyValue[0]] = keyValue[1]\r\n      })\r\n    let urlToReturn = urlArray.substring(0, urlArray.indexOf('?'))\r\n    return checkBaseUtil(urlToReturn)\r\n  }\r\n}\r\n\r\n// if //, slice /\r\nconst checkBaseUtil = (base) => {\r\n  let newBase\r\n  if (base[base.length - 1] === '/' && base.length > 1) {\r\n    newBase = base.slice(0, base.length - 1)\r\n  } else {\r\n    newBase = base\r\n  }\r\n  return newBase\r\n}\r\n\r\nconst checkSubRouters = (router, array = []) => {\r\n  router = router.getObjProps ? router.getObjProps() : router\r\n  if (router.middleWareArr.length > 0) {\r\n    array.push(router.middleWareArr)\r\n  }\r\n  if (router.subRouters.length > 0) {\r\n    return router.subRouters.map((router) => checkSubRouters(router, array))\r\n  }\r\n}\r\n\r\n// populate params util and replace params to match original route\r\nconst populateParamsUtil = (req, routersObject, base, method, rest) => {\r\n  try {\r\n    let param\r\n    let canSkipBecauseParams = false\r\n    if (rest === '/') {\r\n      return { canSkipBecauseParams, param }\r\n    } else {\r\n      let arr = Object.keys(routersObject[base][method])\r\n      for (let path of arr) {\r\n        let splitArr = path.split('/')\r\n        let splitUrl = checkBaseUtil(rest).split('/')\r\n        if (splitArr.length === splitUrl.length) {\r\n          let counter = splitArr.length\r\n          let toBeCounted = 0\r\n          for (let i = 0, len = splitArr.length; i < len; i++) {\r\n            if (splitArr[i].includes(':')) {\r\n              toBeCounted += 1\r\n            } else if (splitArr[i] === splitUrl[i]) {\r\n              toBeCounted += 1\r\n            }\r\n          }\r\n          if (toBeCounted === counter) {\r\n            for (let i = 0, len = splitArr.length; i < len; i++) {\r\n              if (splitArr[i].includes(':')) {\r\n                req.params[splitArr[i].replace(':', '')] = splitUrl[i]\r\n                canSkipBecauseParams = true\r\n              }\r\n            }\r\n            param = path\r\n          }\r\n        }\r\n      }\r\n      return {\r\n        param,\r\n        canSkipBecauseParams\r\n      }\r\n    }\r\n  } catch (e) {\r\n    return {\r\n      param: null,\r\n      canSkipBecauseParams: false\r\n    }\r\n  }\r\n}\r\n\r\n// assign nested object properties util\r\nconst assign = (obj, keyPath, value) => {\r\n  let lastKeyIndex = keyPath.length - 1\r\n  for (let i = 0; i < lastKeyIndex; ++i) {\r\n    let key = keyPath[i]\r\n    if (!(key in obj)) obj[key] = {}\r\n    obj = obj[key]\r\n  }\r\n  obj[keyPath[lastKeyIndex]] = value\r\n}\r\n\r\nexport {\r\n  urlUtil,\r\n  populateRoutersUtil,\r\n  populateUrlOptions,\r\n  handleNestedRoutersUtil,\r\n  populateSubAppsUtil,\r\n  checkBaseUtil,\r\n  populateObjectWithTreeUtil,\r\n  populateQueryUtil,\r\n  populateParamsUtil,\r\n  populateSocketRoutersUtil,\r\n  checkSubRouters,\r\n  getIntrospectSchema,\r\n  assign\r\n}\r\n","module.exports = require(\"apollo-cache-control\");","module.exports = require(\"apollo-client-preset\");","module.exports = require(\"apollo-link-http\");","module.exports = require(\"apollo-server-module-graphiql\");","module.exports = require(\"apollo-tracing\");","module.exports = require(\"apollo-utilities\");","module.exports = require(\"babel-polyfill\");","module.exports = require(\"bluebird\");","module.exports = require(\"body-parser\");","module.exports = require(\"etag\");","module.exports = require(\"eventemitter2\");","module.exports = require(\"fs\");","module.exports = require(\"graphql\");","module.exports = require(\"graphql-extensions\");","module.exports = require(\"graphql-subscriptions\");","module.exports = require(\"graphql-tools\");","module.exports = require(\"http\");","module.exports = require(\"json-to-pretty-yaml\");","module.exports = require(\"node-fetch\");","module.exports = require(\"os\");","module.exports = require(\"print-message\");","module.exports = require(\"socket.io\");","module.exports = require(\"subscriptions-transport-ws\");","module.exports = require(\"superstruct\");","module.exports = require(\"treeify\");","module.exports = require(\"url\");","module.exports = require(\"ws\");"],"sourceRoot":""}